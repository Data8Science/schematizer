{
    "apiVersion": "1.0.0",
    "swaggerVersion": "1.2",
    "basePath": "http://localhost:1210",
    "resourcePath": "/v1/schemas",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/v1/schemas/mysql",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Register an Avro Schema derived from Mysql statements to the latest topic of specified namespace and source.",
                    "notes": "If the namespace and source do not exist, Schematizer will create it automatically.",
                    "type": "Schema",
                    "nickname": "register_schema_from_mysql_stmts",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "body",
                            "required": true,
                            "type": "RegisterSchemaFromMySqlRequest",
                            "paramType": "body"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        },
        {
            "path": "/v1/schemas/avro",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Register given Avro schema to the latest topic of specified namespace and source.",
                    "notes": "If the namespace and source do not exist, Schematizer will create it automatically.",
                    "type": "Schema",
                    "nickname": "register_schema",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "body",
                            "required": true,
                            "type": "RegisterSchemaRequest",
                            "paramType": "body"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        },
        {
            "path": "/v1/schemas/{schema_id}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the schema of specified schema id.",
                    "notes": "",
                    "type": "Schema",
                    "nickname": "get_schema_by_id",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "schema_id",
                            "description": "ID of schema that will be fetched",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid schema ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Schema not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        }
    ],
    "models": {
        "RegisterSchemaFromMySqlRequest": {
            "id": "RegisterSchemaFromMySqlRequest",
            "required": [
                "mysql_statements",
                "namespace",
                "source",
                "source_owner_email"
            ],
            "properties": {
                "mysql_statements": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of MySQL statements. For new created table, the list is expected to have one CREATE TABLE statement. For the table updated, it is expected to have CREATE TABLE statement from old table, ALTER TABLE statement for the change, and the CREATE TABLE statement from the updated table."
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace this Avro schema belongs to, such as yelpmain.db, etc"
                },
                "source": {
                    "type": "string",
                    "description": "Source of the Avro schema, such as table User, or log service.foo etc"
                },
                "source_owner_email": {
                    "type": "string",
                    "description": "Email address of the source owner"
                }
            }
        },
        "RegisterSchemaRequest": {
            "id": "RegisterSchemaRequest",
            "required": [
                "schema",
                "namespace",
                "source",
                "source_owner_email"
            ],
            "properties": {
                "base_schema_id": {
                    "type": "integer",
                    "description": "The original Avro schema that this schema is transformed from"
                },
                "schema": {
                    "type": "string",
                    "description": "The json formatted string of the avro schema to be registered"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace this Avro schema belongs to, such as yelpmain.db, etc"
                },
                "source": {
                    "type": "string",
                    "description": "Source of the Avro schema, such as table User, or log service.foo etc"
                },
                "source_owner_email": {
                    "type": "string",
                    "description": "Email address of the source owner"
                }
            }
        },
        "Source": {
            "id": "Source",
            "properties": {
                "source_id": {
                    "type": "integer",
                    "description": "Source ID"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the source, such as yelpmain.db, etc"
                },
                "source": {
                    "type": "string",
                    "description": "Source of the Avro schema, such as table User, or log service.foo etc"
                },
                "source_owner_email": {
                    "type": "string",
                    "description": "Email address of the source owner"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this source is created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this source is last updated"
                }
            }
        },
        "Topic": {
            "id": "Topic",
            "properties": {
                "topic_id": {
                    "type": "integer",
                    "description": "Topic ID"
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic name."
                },
                "source": {
                    "$ref": "Source",
                    "description": "Source of the Avro schema."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this topic is created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this topic is last updated"
                }
            }
        },
        "Schema": {
            "id": "Schema",
            "properties": {
                "schema_id": {
                    "type": "integer",
                    "description": "Avro schema ID"
                },
                "schema": {
                    "type": "string",
                    "description": "Json formatted avro schema string."
                },
                "topic": {
                    "$ref": "Topic",
                    "description": "Topic that this schema is associated to"
                },
                "base_schema_id": {
                    "type": "integer",
                    "description": "The original Avro schema that this schema is transformed from"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "RW",
                        "R",
                        "Disabled"
                    ],
                    "description": "Schema status: RW (read/write), R (read-only), Disabled. `Read` status means this schema can be used to deserialize messages, and `Write` status means this schema can be used to serialize messages. Disabled schemas cannot be used for either."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this schema is created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this schema is last updated"
                }
            }
        }
    }
}
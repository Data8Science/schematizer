{
    "apiVersion": "1.0.0",
    "swaggerVersion": "1.2",
    "basePath": "http://169.254.255.254:20912",
    "resourcePath": "/v1/sources",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/v1/sources",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all the sources",
                    "type": "array",
                    "items": {
                        "$ref": "Source"
                    },
                    "nickname": "list_sources",
                    "authorizations": {},
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        },
        {
            "path": "/v1/sources/{source_id}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the source of specified ID",
                    "type": "Source",
                    "nickname": "get_source_by_id",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "source_id",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid source ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Source ID not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        },
        {
            "path": "/v1/sources/{source_id}/category",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Update the category of given source.",
                    "notes": "",
                    "type": "CategoryResponse",
                    "nickname": "update_category",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "body",
                            "required": true,
                            "type": "CategoryRequest",
                            "paramType": "body"
                        },
                        {
                            "name": "source_id",
                            "description": "ID of source that will have its category updated",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Source ID not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Remove the source from current category.",
                    "notes": "",
                    "type": "CategoryResponse",
                    "nickname": "delete_category",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "source_id",
                            "description": "ID of source that will have its category deleted",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Source ID not found"
                        },
                        {
                            "code": 404,
                            "message": "Category not found for the given source"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        },
        {
            "path": "/v1/sources/{source_id}/topics",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all the topics of specified source",
                    "type": "array",
                    "items": {
                        "$ref": "Topic"
                    },
                    "nickname": "list_topics_by_source_id",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "source_id",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid source ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Source ID not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        },
        {
            "path": "/v1/sources/{source_id}/topics/latest",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the latest topic of specified source",
                    "type": "Topic",
                    "nickname": "get_latest_topic_by_source_id",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "source_id",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid source ID supplied."
                        },
                        {
                            "code": 404,
                            "message": "Latest topic is not found."
                        },
                        {
                            "code": 404,
                            "message": "Source is not found."
                        },
                        {
                            "code": 500,
                            "message": "Server side error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/v1/sources/{source_id}/refreshes",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a refresh associated with specified source id.",
                    "type": "Refresh",
                    "nickname": "create_refresh",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "source_id",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        },
                        {
                            "name": "body",
                            "required": true,
                            "type": "CreateRefreshRequest",
                            "paramType": "body"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Source is not found."

                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                },
                {
                    "method": "GET",
                    "summary": "List the history of refreshes on the specified source id.",
                    "type": "array",
                    "items": {
                        "$ref": "Refresh"
                    },
                    "nickname": "list_refreshes_by_source_id",
                    "authorizations": {},
                    "parameters": [
                        {
                            "name": "source_id",
                            "required": true,
                            "type": "integer",
                            "paramType": "path",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Namespace is not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ]
                }
            ]
        }
    ],
    "models": {
        "Namespace": {
            "id": "Namespace",
            "properties": {
                "namespace_id": {
                    "type": "integer",
                    "description": "Namespace ID"
                },
                "name": {
                    "type": "string",
                    "description": "Namespace, such as yelpmain.db, etc"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this namespace is created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this namespace is last updated"
                }
            }
        },
        "Source": {
            "id": "Source",
            "properties": {
                "source_id": {
                    "type": "integer",
                    "description": "Source ID"
                },
                "namespace": {
                    "$ref": "Namespace",
                    "description": "Namespace of the source"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the source, such as 'User' for table User."
                },
                "owner_email": {
                    "type": "string",
                    "description": "Email address of the source owner"
                },
                "category": {
                    "type": "string",
                    "description": "Category that this source belongs to"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this source is created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this source is last updated"
                }
            }
        },
        "Topic": {
            "id": "Topic",
            "properties": {
                "topic_id": {
                    "type": "integer",
                    "description": "Topic ID"
                },
                "name": {
                    "type": "string",
                    "description": "The Kafka topic name."
                },
                "source": {
                    "$ref": "Source",
                    "description": "Source of the Avro schema."
                },
                "contains_pii": {
                    "type": "boolean",
                    "description": "Whether the messages in this topic contain PII."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this topic is created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this topic is last updated"
                }
            }
        },
        "CategoryRequest": {
            "id": "CategoryRequest",
            "required": [
                "category"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The updated category of a source"
                }
            }
        },
        "CategoryResponse": {
            "id": "CategoryResponse",
            "properties": {
                "source_id": {
                    "type": "integer",
                    "description": "The id of the source this category specifies"
                },
                "category": {
                    "type": "string",
                    "description": "The category that the specified source belongs to"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this category is created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this category is last updated"
                }
            }
        },
        "Refresh": {
            "id": "Refresh",
            "properties": {
                "refresh_id": {
                    "type": "integer",
                    "description": "Refresh ID"
                },
                "source": {
                    "$ref": "Source",
                    "description": "Source that this refresh is running on."
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "PAUSED",
                        "SUCCESS",
                        "FAILED"
                    ],
                    "description": "Current status of refresh."
                },
                "offset": {
                    "type": "integer",
                    "description": "Represents the last known position that has been refreshed."
                },
                "batch_size": {
                    "type": "integer",
                    "description": "Number of rows to refresh per batch."
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "MAX"
                    ],
                    "description": "Priority of this refresh."
                },
                "filter_condition": {
                    "type": "string",
                    "description": "This field contains the expression used to filter the records that must be refreshed. E.g. It may be a MySQL where clause if the source of the refresh is a MySQL table."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this refresh is created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this refresh is last updated."
                }
            }
        },
        "CreateRefreshRequest": {
            "id": "CreateRefreshRequest",
            "properties": {
                "offset": {
                    "type": "integer",
                    "description": "Represents the last known position that has been refreshed."
                },
                "batch_size": {
                    "type": "integer",
                    "description": "Number of rows to refresh per batch."
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "MAX"
                    ],
                    "description": "Priority of this refresh."
                },
                "filter_condition": {
                    "type": "string",
                    "description": "This field contains the expression used to filter the records that must be refreshed. E.g. It may be a MySQL where clause if the source of the refresh is a MySQL table."
                }
                "avg_rows_per_second_cap": {
                    "type": "integer",
                    "description": "This field throttles the throughput of the refresh runner once the refresh is actually run. We will sleep in between batch row gets to limit it to this cap",
                    "required": false
                }
            }
        }
    }
}

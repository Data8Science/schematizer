# -*- coding: utf-8 -*-
"""
Here we define a single tween factory that enables metrics
logging. For more information on how this works, take a quick peek at
the associated Pyramid documentation.

.. _pyramid documentation:
   http://pyramid.readthedocs.org/en/latest/narr/hooks.html#registering-tweens
"""
from __future__ import absolute_import

import logging
import time


log = logging.getLogger(__name__)


def metrics_tween_factory(handler, registry):
    """Tween to record metrics information for each request.

    :param handler: a pyramid view handler
    :param registry: a :class:`pyramid.registry.Registry`
    :returns: a pyramid view wrapped in a `uwsgi_metrics.timer` context
    """
    import uwsgi_metrics

    def response_meter(name):
        uwsgi_metrics.meter(__name__, name)

    def timing_tween(request):
        start_time_s = time.time()
        try:
            response = handler(request)

            # Response rate, broken down by status code
            if 100 <= response.status_int < 199:
                response_meter('1xx-responses')
            elif 200 <= response.status_int < 299:
                response_meter('2xx-responses')
            elif 300 <= response.status_int < 399:
                response_meter('3xx-responses')
            elif 400 <= response.status_int < 499:
                response_meter('4xx-responses')
            elif 500 <= response.status_int < 599:
                response_meter('5xx-responses')

            return response
        except:
            # Exception rate
            uwsgi_metrics.meter(__name__, 'exceptions')
            raise
        finally:
            end_time_s = time.time()
            delta_s = end_time_s - start_time_s
            delta_ms = delta_s * 1000

            if request.matched_route:
                # Timing by endpoint
                uwsgi_metrics.timer(
                    __name__, request.matched_route.name, delta_ms)
    return timing_tween

# -*- coding: utf-8 -*-
"""This is a wrapper to the MySQLdb module. It exists so you don't use verboten
technologies, and so stupid Python packages don't freak out as they muck with
sys.path (see #7992).
"""
# We have to import this first. see ticket #7992
import sqlalchemy.exc


# Then we can import other stuff
import MySQLdb
import MySQLdb.constants.CLIENT
from MySQLdb import OperationalError, IntegrityError, Warning, DataError
from MySQLdb import ProgrammingError
from MySQLdb.connections import Connection
from MySQLdb.constants.ER import LOCK_WAIT_TIMEOUT, DUP_ENTRY, DUP_KEY, LOCK_DEADLOCK
from MySQLdb.constants.CR import CONN_HOST_ERROR, SERVER_GONE_ERROR
from MySQLdb.converters import FIELD_TYPE
from MySQLdb.converters import conversions
from MySQLdb.cursors import Cursor
from MySQLdb.cursors import DictCursor
from MySQLdb.cursors import SSCursor


def connect(*args, **kwargs):
    """We need cursor.execute() to return the number of rows MATCHED, not updated
    This is for SQLAlchemy, see ticket #16163.
    """
    kwargs['client_flag'] = (kwargs.get('client_flag', 0) |
                             MySQLdb.constants.CLIENT.FOUND_ROWS)
    return MySQLdb.connect(*args, **kwargs)

OPERATIONAL_ERRORS = (OperationalError, sqlalchemy.exc.OperationalError)


# TODO: deprecate imports from this module in the next major release
_ignore_flakes = [
    Connection,
    LOCK_WAIT_TIMEOUT,
    DUP_ENTRY,
    DUP_KEY,
    LOCK_DEADLOCK,
    CONN_HOST_ERROR,
    SERVER_GONE_ERROR,
    FIELD_TYPE,
    conversions,
    Cursor,
    DictCursor,
    SSCursor,
    IntegrityError,
    Warning,
    DataError,
    ProgrammingError,
]

# -*- coding: utf-8 -*-
"""Initialize the yelp_conn package and load topology into the a global
topology.
"""
import logging
import os
import threading

from version import __version__, __release__

silence_pyflakes = [
    __version__,
    __release__,
]

log = logging.getLogger('yelp_conn')


class MissingConnectionSetError(StandardError):
    pass


initialized = False
globals_lock = threading.RLock()


def parse_topology(topology):
    """Read in db params from a config file (usually topology.yaml)

    In dev, topology.yaml is expected to be in the current working directory
    In stage and prod, topology.yaml is expected to be in /nail/srv/configs

    :param topology: the file name of a topology file or a dict with topology config.
        This is preferred as a fully-qualified path, but can also be a relative path.
        For legacy reasons, relative paths will also be searched for in
        /nail/srv/configs

    :returns: a TopologyFile, which can be poked to register global ConnectionSets
    :rtype: :class:`yelp_conn.topology.TopologyFile`
    """
    from .topology import TopologyFile

    # A TopologyFile-like object
    if hasattr(topology, 'get_connection_set_configs'):
        return topology

    if isinstance(topology, dict):
        return TopologyFile(topology)

    paths = [
        os.path.abspath(topology),
        os.path.join(os.sep, 'nail', 'srv', 'configs', topology)]

    for path in paths:
        if os.path.exists(path):
            return TopologyFile.new_from_file(path)

    raise ValueError('%s not found in %s' % (topology, paths))


def load_topology(topology_file_name):
    """Reads in a topology file (as per parse_topology) and returns the
    ConnectionSets defined therein. Contrast with initialize, which
    auto-registers those ConnectionSets as class methods of
    yelp_conn.connection_set.ConnectionSet.

    :param topology_file_name: path to a topology file as per parse_topology
    """
    from . import connection_set

    topology = parse_topology(topology_file_name)
    result = {}
    for connection_set_name, connection_params, connection_set_config in topology.get_connection_set_configs:
        result[connection_set_name] = connection_set.ConnectionSet(connection_set_name, connection_params, read_only=connection_set_config.get('read_only', False))

    return result


_global_topology = None


def initialize(expected_connection_sets=None):
    """All consumers are required to initialize the yelp_conn submodule before
    using it.

    :param expected_connection_sets: A set of connection set names
    """
    global _global_topology, initialized

    from yelp_conn import connection_set
    from yelp_conn import topology
    from yelp_conn import config
    import staticconf

    with globals_lock:
        # Read in the topology file
        _global_topology = parse_topology(config.topology.value)
        connection_set_file = config.connection_set_file.value
        if connection_set_file:
            _global_topology.append_file(connection_set_file)

        # Register the connection sets we found
        connection_set.register_from_topology(_global_topology)

        if expected_connection_sets is not None:
            topology.verify_expected(expected_connection_sets,
                connection_set.registered_connection_set_names(),
                "Missing connection sets after initialization: [%s]",
                exc_class=MissingConnectionSetError)

        staticconf.reload(name=config.namespace)
        initialized = True


def append_topology(topology_file):
    """Append the given topology_file to our global magic configuration. Only
    valid if initialize() has been called and reset_module() has not been called
    in the interim. Not fore use with initialize_minimal() / load_topology().

    This method has a side-effect of reregistering all connections (as necessary, since
    their constituent pools may have changed). If you had any connections checked out
    before calling it, they will likely no longer work.

    :param topology_file: fully-qualified path to a topology.yaml file
    """
    from yelp_conn import connection_set

    with globals_lock:
        if _global_topology is None:
            raise ValueError("append_topology() called before initialize()")
        _global_topology.append_file(topology_file)
        connection_set.reset()

        # Register the connection sets we found
        connection_set.register_from_topology(_global_topology)


def reset_module():
    """Reset yelp_conn. Should be followed by a call to initialize. Not for use
    outside of testing.
    """
    global initialized

    from yelp_conn import connection_set
    from yelp_conn import engine
    from yelp_conn import config
    import staticconf

    with globals_lock:
        connection_set.reset()
        engine.reset_and_uncache()
        staticconf.reload(config.namespace)
        initialized = False

# -*- coding: utf-8 -*-
from sqlalchemy.dialects.mysql.mysqldb import MySQLDialect_mysqldb

COLLATIONS = {
    u'big5_chinese_ci': 'big5',
    u'big5_bin': 'big5',
    u'dec8_swedish_ci': 'dec8',
    u'dec8_bin': 'dec8',
    u'cp850_general_ci': 'cp850',
    u'cp850_bin': 'cp850',
    u'hp8_english_ci': 'hp8',
    u'hp8_bin': 'hp8',
    u'koi8r_general_ci': 'koi8r',
    u'koi8r_bin': 'koi8r',
    u'latin1_german1_ci': 'latin1',
    u'latin1_swedish_ci': 'latin1',
    u'latin1_danish_ci': 'latin1',
    u'latin1_german2_ci': 'latin1',
    u'latin1_bin': 'latin1',
    u'latin1_general_ci': 'latin1',
    u'latin1_general_cs': 'latin1',
    u'latin1_spanish_ci': 'latin1',
    u'latin2_czech_cs': 'latin2',
    u'latin2_general_ci': 'latin2',
    u'latin2_hungarian_ci': 'latin2',
    u'latin2_croatian_ci': 'latin2',
    u'latin2_bin': 'latin2',
    u'swe7_swedish_ci': 'swe7',
    u'swe7_bin': 'swe7',
    u'ascii_general_ci': 'ascii',
    u'ascii_bin': 'ascii',
    u'ujis_japanese_ci': 'ujis',
    u'ujis_bin': 'ujis',
    u'sjis_japanese_ci': 'sjis',
    u'sjis_bin': 'sjis',
    u'hebrew_general_ci': 'hebrew',
    u'hebrew_bin': 'hebrew',
    u'tis620_thai_ci': 'tis620',
    u'tis620_bin': 'tis620',
    u'euckr_korean_ci': 'euckr',
    u'euckr_bin': 'euckr',
    u'koi8u_general_ci': 'koi8u',
    u'koi8u_bin': 'koi8u',
    u'gb2312_chinese_ci': 'gb2312',
    u'gb2312_bin': 'gb2312',
    u'greek_general_ci': 'greek',
    u'greek_bin': 'greek',
    u'cp1250_general_ci': 'cp1250',
    u'cp1250_czech_cs': 'cp1250',
    u'cp1250_croatian_ci': 'cp1250',
    u'cp1250_bin': 'cp1250',
    u'cp1250_polish_ci': u'cp1250',
    u'gbk_chinese_ci': 'gbk',
    u'gbk_bin': 'gbk',
    u'latin5_turkish_ci': 'latin5',
    u'latin5_bin': 'latin5',
    u'armscii8_general_ci': 'armscii8',
    u'armscii8_bin': 'armscii8',
    u'utf8_general_ci': 'utf8',
    u'utf8_bin': 'utf8',
    u'utf8_unicode_ci': 'utf8',
    u'utf8_icelandic_ci': 'utf8',
    u'utf8_latvian_ci': 'utf8',
    u'utf8_romanian_ci': 'utf8',
    u'utf8_slovenian_ci': 'utf8',
    u'utf8_polish_ci': 'utf8',
    u'utf8_estonian_ci': 'utf8',
    u'utf8_spanish_ci': 'utf8',
    u'utf8_swedish_ci': 'utf8',
    u'utf8_turkish_ci': 'utf8',
    u'utf8_czech_ci': 'utf8',
    u'utf8_danish_ci': 'utf8',
    u'utf8_lithuanian_ci': 'utf8',
    u'utf8_slovak_ci': 'utf8',
    u'utf8_spanish2_ci': 'utf8',
    u'utf8_roman_ci': 'utf8',
    u'utf8_persian_ci': 'utf8',
    u'utf8_esperanto_ci': 'utf8',
    u'utf8_hungarian_ci': 'utf8',
    u'ucs2_general_ci': 'ucs2',
    u'ucs2_bin': 'ucs2',
    u'ucs2_unicode_ci': 'ucs2',
    u'ucs2_icelandic_ci': 'ucs2',
    u'ucs2_latvian_ci': 'ucs2',
    u'ucs2_romanian_ci': 'ucs2',
    u'ucs2_slovenian_ci': 'ucs2',
    u'ucs2_polish_ci': 'ucs2',
    u'ucs2_estonian_ci': 'ucs2',
    u'ucs2_spanish_ci': 'ucs2',
    u'ucs2_swedish_ci': 'ucs2',
    u'ucs2_turkish_ci': 'ucs2',
    u'ucs2_czech_ci': 'ucs2',
    u'ucs2_danish_ci': 'ucs2',
    u'ucs2_lithuanian_ci': 'ucs2',
    u'ucs2_slovak_ci': 'ucs2',
    u'ucs2_spanish2_ci': 'ucs2',
    u'ucs2_roman_ci': 'ucs2',
    u'ucs2_persian_ci': 'ucs2',
    u'ucs2_esperanto_ci': 'ucs2',
    u'ucs2_hungarian_ci': 'ucs2',
    u'cp866_general_ci': 'cp866',
    u'cp866_bin': 'cp866',
    u'keybcs2_general_ci': 'keybcs2',
    u'keybcs2_bin': 'keybcs2',
    u'macce_general_ci': 'macce',
    u'macce_bin': 'macce',
    u'macroman_general_ci': 'macroman',
    u'macroman_bin': 'macroman',
    u'cp852_general_ci': 'cp852',
    u'cp852_bin': 'cp852',
    u'latin7_estonian_cs': 'latin7',
    u'latin7_general_ci': 'latin7',
    u'latin7_general_cs': 'latin7',
    u'latin7_bin': 'latin7',
    u'cp1251_bulgarian_ci': 'cp1251',
    u'cp1251_ukrainian_ci': 'cp1251',
    u'cp1251_bin': 'cp1251',
    u'cp1251_general_ci': 'cp1251',
    u'cp1251_general_cs': 'cp1251',
    u'cp1256_general_ci': 'cp1256',
    u'cp1256_bin': 'cp1256',
    u'cp1257_lithuanian_ci': 'cp1257',
    u'cp1257_bin': 'cp1257',
    u'cp1257_general_ci': 'cp1257',
    u'binary': 'binary',
    u'geostd8_general_ci': 'geostd8',
    u'geostd8_bin': 'geostd8',
    u'cp932_japanese_ci': 'cp932',
    u'cp932_bin': 'cp932',
    u'eucjpms_japanese_ci': 'eucjpms',
    u'eucjpms_bin': 'eucjpms',
    u'ucs2_general50_ci': u'ucs2',
    u'ucs2_sinhala_ci': u'ucs2',
    u'utf16_bin': u'utf16',
    u'utf16_czech_ci': u'utf16',
    u'utf16_danish_ci': u'utf16',
    u'utf16_esperanto_ci': u'utf16',
    u'utf16_estonian_ci': u'utf16',
    u'utf16_general_ci': u'utf16',
    u'utf16_hungarian_ci': u'utf16',
    u'utf16_icelandic_ci': u'utf16',
    u'utf16_latvian_ci': u'utf16',
    u'utf16_lithuanian_ci': u'utf16',
    u'utf16_persian_ci': u'utf16',
    u'utf16_polish_ci': u'utf16',
    u'utf16_roman_ci': u'utf16',
    u'utf16_romanian_ci': u'utf16',
    u'utf16_sinhala_ci': u'utf16',
    u'utf16_slovak_ci': u'utf16',
    u'utf16_slovenian_ci': u'utf16',
    u'utf16_spanish2_ci': u'utf16',
    u'utf16_spanish_ci': u'utf16',
    u'utf16_swedish_ci': u'utf16',
    u'utf16_turkish_ci': u'utf16',
    u'utf16_unicode_ci': u'utf16',
    u'utf32_bin': u'utf32',
    u'utf32_czech_ci': u'utf32',
    u'utf32_danish_ci': u'utf32',
    u'utf32_esperanto_ci': u'utf32',
    u'utf32_estonian_ci': u'utf32',
    u'utf32_general_ci': u'utf32',
    u'utf32_hungarian_ci': u'utf32',
    u'utf32_icelandic_ci': u'utf32',
    u'utf32_latvian_ci': u'utf32',
    u'utf32_lithuanian_ci': u'utf32',
    u'utf32_persian_ci': u'utf32',
    u'utf32_polish_ci': u'utf32',
    u'utf32_roman_ci': u'utf32',
    u'utf32_romanian_ci': u'utf32',
    u'utf32_sinhala_ci': u'utf32',
    u'utf32_slovak_ci': u'utf32',
    u'utf32_slovenian_ci': u'utf32',
    u'utf32_spanish2_ci': u'utf32',
    u'utf32_spanish_ci': u'utf32',
    u'utf32_swedish_ci': u'utf32',
    u'utf32_turkish_ci': u'utf32',
    u'utf32_unicode_ci': u'utf32',
    u'utf8_general50_ci': u'utf8',
    u'utf8_general_mysql500_ci': u'utf8',
    u'utf8_sinhala_ci': u'utf8',
    u'utf8mb4_bin': u'utf8mb4',
    u'utf8mb4_czech_ci': u'utf8mb4',
    u'utf8mb4_danish_ci': u'utf8mb4',
    u'utf8mb4_esperanto_ci': u'utf8mb4',
    u'utf8mb4_estonian_ci': u'utf8mb4',
    u'utf8mb4_general_ci': u'utf8mb4',
    u'utf8mb4_hungarian_ci': u'utf8mb4',
    u'utf8mb4_icelandic_ci': u'utf8mb4',
    u'utf8mb4_latvian_ci': u'utf8mb4',
    u'utf8mb4_lithuanian_ci': u'utf8mb4',
    u'utf8mb4_persian_ci': u'utf8mb4',
    u'utf8mb4_polish_ci': u'utf8mb4',
    u'utf8mb4_roman_ci': u'utf8mb4',
    u'utf8mb4_romanian_ci': u'utf8mb4',
    u'utf8mb4_sinhala_ci': u'utf8mb4',
    u'utf8mb4_slovak_ci': u'utf8mb4',
    u'utf8mb4_slovenian_ci': u'utf8mb4',
    u'utf8mb4_spanish2_ci': u'utf8mb4',
    u'utf8mb4_spanish_ci': u'utf8mb4',
    u'utf8mb4_swedish_ci': u'utf8mb4',
    u'utf8mb4_turkish_ci': u'utf8mb4',
    u'utf8mb4_unicode_ci': u'utf8mb4'
}

class MysqlFastConnectDialect(MySQLDialect_mysqldb):
    """Extend the MySQL mysqldb Dialect by skipping initialization
    queries.  These queries return static data, or can be determined
    from connection_info.
    """

    def __init__(self, connection_params=None, **kwargs):
        MySQLDialect_mysqldb.__init__(self, **kwargs)
        self.connection_params = connection_params or {}

    def _detect_collations(self, connection):
        """
        This returns the full set of collations supported by the server. This
        list has been dumped for MySQL 5.0.92-50-log

        Overrides sqlalchemy.dialects.mysql.base.MySQLDialect._detect_collations()
        """
        return COLLATIONS

    def _detect_charset(self, connection):
        """
        The default character set used by the server.
        The default dialect looks up this value from:
            SHOW VARIABLES LIKE 'character_set%

        We define this value in our connection configuration. Defaults to
        calling super() to determine the value.

        Overrides sqlalchemy.connectors.mysqldb.MySQLDBConnector._detect_charset()
        """
        if 'charset' in self.connection_params:
            return self.connection_params['charset']
        return super(MysqlFastConnectDialect, self)._detect_charset(connection)

    def _check_unicode_returns(self, connection):
        """
        The default dialects looks up these values from:
            SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
            SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1

        We define this value in our connection configuration. Defaults to calling
        super() to determine the value.

        Overrides sqlalchemy.engine.default.DefaultDialect._check_unicode_returns()
        """
        if 'use_unicode' in self.connection_params:
            return self.connection_params['use_unicode']
        return super(MysqlFastConnectDialect, self)._check_unicode_returns(connection)

    def _get_default_schema_name(self, connection):
        """
        The default database used by this connection.
        The default dialect looks up this value using:
            SELECT DATABASE()

        We define this value in our connection configuration. Defaults to calling
        super() to determine the value.

        Overrides sqlalchemy.engine.default.DefaultDialect._get_default_schema_name()
        """
        if 'db' in self.connection_params:
            return self.connection_params['db']
        return super(MysqlFastConnectDialect, self)._get_default_schema_name(connection)

    def _detect_ansiquotes(self, connection):
        """
        The default dialect looks up these values from:
            SHOW VARIABLES LIKE 'sql_mode'

        MySQL returns an empty string ('').

        Overrides sqlalchemy.dialects.mysql.base.MySQLDialect._detect_ansiquotes()
        """
        self._server_ansiquotes = False
        self._backslash_escapes = True

    def _detect_casing(self, connection):
        """
        This value determines if table names should be case sensitive.
        The default dialect looks up this value from:
            SHOW VARIABLES LIKE 'lower_case_table_names'

        MySQL returns 0.

        Overrides sqlalchemy.dialects.mysql.base.MySQLDialect._detect_casing()
        """
        return 0


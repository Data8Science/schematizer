"""Utilities for altering and renaming tables.

Since most uses of ALTER TABLE involve dumping out and re-creating a table,
we provide utilities to bundle together a lot of changes into one ALTER TABLE
statement.
"""
from yelp_conn.mysql.common import generic_index_sql
from yelp_conn.mysql.common import restrict_kwargs


def rename_tables(cursor, pairs):
    """Given a list of tuples or a dictionary, rename the pairs of tables.  Use
    list when ordering is important (eg. swapping tables).

    pairs -- either tuples [(old_tbl_name, new_tbl_name), ...]
             or dictionary {'old_tbl_name': 'new_tbl_name', ...}
    """
    if isinstance(pairs, dict):
        pair_list = pairs.iteritems()
    else:
        pair_list = pairs

    sql = "RENAME TABLE " + ",".join("`%s` TO `%s`" % (old, new) for (old, new) in pair_list)
    return cursor.execute(sql)

def rename_table(cursor, old_tbl_name, new_tbl_name):
    """Rename the given table."""
    return rename_tables(cursor, [(old_tbl_name, new_tbl_name)])

def alter_table(cursor, tbl_name, *alter_specs, **kwargs):
    """Run an ALTER TABLE statment on the given table.

    For example:
    alter_table(cursor, 'foo', add_index('bar'), add_unique_index('baz', 'bar'))
    Args:
    cursor -- DB cursor
    tbl_name -- name of the table to alter
    ignore -- if there are duplicate keys (because of a newly created index), silently
        delete duplicate rows
    alter_specs -- a list of SQL detailing what to change about the table
        (e.g. ['ADD KEY ON (`foo`)', 'ADD UNIQUE KEY ON (`bar`, `foo`)'])
    """
    restrict_kwargs(kwargs, ('index_name', 'using'))
    ignore = kwargs.get('ignore')

    if not alter_specs:
        return

    sql = 'ALTER %s TABLE `%s` %s' % (
        'IGNORE' if ignore else '',
        tbl_name,
        ', '.join(alter_specs))
    cursor.execute(sql)

def add_index(*col_names, **kwargs):
    """Create an ADD INDEX clause for an ALTER TABLE statement.

    Args:
    col_names -- sequence of names of columns to add an index on

    Keyword Args (all optional):
    index_name -- name for your new index (optional)
    using -- kind of index to use (e.g. 'BTREE', 'RTREE', 'HASH'). If unspecified,
        we just use the default

    Returns:
    a string like 'ADD INDEX foo_idx USING BTREE (`foo`)'
    """
    restrict_kwargs(kwargs, ('index_name', 'using'))
    return generic_index_sql('ADD INDEX', *col_names, **kwargs)

def add_unique_index(*col_names, **kwargs):
    """Create an ADD UNIQUE INDEX clause for an ALTER TABLE statement.

    Args:
    col_names -- sequence of names of columns to add an index on

    Keyword Args (all optional):
    index_name -- name for your new index (optional)
    using -- kind of index to use (e.g. 'BTREE', 'RTREE', 'HASH'). If unspecified,
        we just use the default

    Returns:
    a string like 'ADD UNIQUE INDEX bar_foo_idx USING BTREE (`bar`, `foo`)'
    """
    restrict_kwargs(kwargs, ('index_name', 'using'))
    return generic_index_sql('ADD UNIQUE INDEX', *col_names, **kwargs)

def add_primary_key(*col_names, **kwargs):
    """Create an ADD PRIMARY KEY clause for an ALTER TABLE statement.

    Args:
    col_names -- sequence of names of columns to add an index on

    Keyword Args (all optional):
    using -- kind of index to use (e.g. 'BTREE', 'RTREE', 'HASH'). If unspecified,
        we just use the default

    Returns:
    a string like 'ADD PRIMARY KEY USING BTREE (`baz`, `quz`)'
    """
    restrict_kwargs(kwargs, ('using',))
    return generic_index_sql('ADD PRIMARY KEY', *col_names, **kwargs)

def drop_index(index_name, table_name=None):
    """Without table_name, create a DROP INDEX clause for an ALTER TABLE statement.
    When given the table name, returns a standalone statement.

    Args:
    index_name -- name of the index. Use util.mysql.show.show_indexes() to
        figure out the name for a given index.
    table_name -- name of the table to from which to drop the index. Optional,
        provide this arguement if you want a standalone statement, not an alter
        clause.
    """
    alter = 'DROP INDEX `%s`' % (index_name,)
    if table_name:
        # return a standalone statement
        alter += ' ON `%s`' % table_name
    return alter

def pack_keys_option(value='1'):
    """Create a PACK_KEYS=... clause for an ALTER TABLE (or CREATE TABLE)
    statement.

    PACK_KEYS only works on MyISAM tables; it tells the database to
    compact numerical values.

    Args:
    value -- should be '1', '0', or 'DEFAULT'
    """
    return 'PACK_KEYS=%s' % value

def modify_column(column_definition):
    """MODIFY COLUMN clause for an ALTER TABLE statement.  You must specify the
    entire new column definition; nothing will be inherited from the previous type
    (eg. if you modify an UNSIGNED INT and change to BIGINT, it will not be
    unsigned anymore).

    Recommend use of create.column to put together column_definition.

    Args:
    column_definition -- string column definition (eg. "ID INT UNSIGNED DEFAULT 1 COMMENT 'id column'")
    """
    return ' MODIFY %s' % column_definition



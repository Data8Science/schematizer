"""Very basic functions used by the mysql utils."""

def get_rows(cursor, sql, params={}):
    """
    Run a SQL query, and return all results, representing
    them as dictionaries mapping the name of a column
    to a value (we assume all columns returned have
    unique names).
    """
    cursor.execute(sql, params)
    if cursor.description is None:
        return None
    else:
        col_names = [d[0] for d in cursor.description]
        return [dict(zip(col_names, row)) for row in cursor.fetchall()]

def restrict_kwargs(kwargs_dict, allowed):
    """If we see an item in kwargs_dict that's not in keys, raise a
    TypeError"""
    allowed = set(allowed)
    for k in kwargs_dict:
        if k not in allowed:
            raise TypeError('got an unexpected keyword argument %r' % (k,))

def generic_index_sql(prefix, *col_names, **kwargs):
    """Generate SQL to define an index in an ALTER TABLE or CREATE TABLE stmt

    Args:
    prefix -- the beginning of the SQL, e.g. 'INDEX' or 'ADD SPATIAL INDEX'
    col_names -- names of the columns to index on

    Keyword Args (all optional):
    index_name -- name for your new index
    using -- kind of index to use (e.g. 'BTREE', 'RTREE', 'HASH')
    """
    restrict_kwargs(kwargs, ('index_name', 'using'))
    sql = prefix
    if 'index_name' in kwargs:
        sql += ' `%s`' % kwargs['index_name']
    if 'using' in kwargs:
        sql += ' USING %s' % kwargs['using']
    sql += ' (%s)' % (', '.join('`%s`' % (col_name,) for col_name in col_names))
    return sql


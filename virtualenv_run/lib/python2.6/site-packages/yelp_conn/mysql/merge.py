"""Utilities for creating and updating merge tables."""

import re

from yelp_conn.mysql.alter import alter_table
from yelp_conn.mysql.drop import drop_table_if_exists
from yelp_conn.mysql.show import show_create_table
from yelp_conn.mysql.show import show_tables


CREATE_TABLE_RE = re.compile(r'CREATE TABLE\s+\`\w+\`')
ENGINE_RE = re.compile(r'ENGINE=\w+')

def create_merge_table(cursor, tbl_name, sub_tbl_names, alter_if_exists=False, drop_if_exists=False, insert_method='NO'):
    """Create a table with the MERGE engine that presents the given sub-tables
    as a single table.

    All the tables you merge must by MyISAM tables, and must have identical
    schemas

    Args:
    cursor -- DB cursor
    tbl_name -- the name for the newly created MERGE table
    sub_tbl_names -- one or more tables to MERGE (util.mysql.show.show_tables()
        is a quick way to view the names of all tables in a database)
    alter_if_exists -- if a table by tbl_name exists, assume it is a merge
        table with the correct definition, and just change the list of
        tables it depends on (and insert_method, if you set it). Make sure
        you drop tables you no longer want to merge AFTER you run
        the ALTER TABLE statement (MySQL sometimes raises an error if
        you try to ALTER a merge table that points to nonexistent tables).
    drop_if_exists -- if a table by this name already exists, drop it and then
        re-create it. alter_if_exists is preferred if you don't need to
        change the table definition; see Ticket #8526.
    insert_method -- which sub-table are new rows inserted into, if any? either
        'NO', 'FIRST', or 'LAST' or None (which MySQL defaults to NO).
    """
    if not sub_tbl_names:
        raise ValueError('You must specify at least one sub-table')

    if alter_if_exists and drop_if_exists:
        raise ValueError("You can't set both alter_if_exists and drop_if_exists")

    if alter_if_exists:
        all_tbl_names = show_tables(cursor)

        # table already exists, just alter it
        if tbl_name in all_tbl_names:
            alter_specs = []
            alter_specs.append(union_option(sub_tbl_names))
            if insert_method is not None:
                alter_specs.append(insert_method_option(insert_method))
            alter_table(cursor, tbl_name, *alter_specs)
            return
    elif drop_if_exists:
        drop_table_if_exists(cursor, tbl_name)

    # Use the first table's definition as a model for the merge table,
    # and do search and replace
    new_create_table = 'CREATE TABLE `%s`' % (tbl_name,)
    new_engine_etc = 'ENGINE=MERGE UNION=(%s) INSERT_METHOD=%s' % (
        ', '.join('`%s`' % (sub_tbl_name,) for sub_tbl_name in sub_tbl_names),
        insert_method)
    model_sql = show_create_table(cursor, sub_tbl_names[0])
    # if for some reason, CREATE_TABLE_RE doesn't match, the worst that can
    # happen is we try to create a table that already exists
    sql = CREATE_TABLE_RE.sub(new_create_table, model_sql)
    sql = ENGINE_RE.sub(new_engine_etc, sql)

    cursor.execute(sql)

def union_option(sub_tbl_names):
    """The UNION=(...) table option, which determines which tables a merge
    table merges together. Works in CREATE TABLE and ALTER TABLE statements.

    Args:
    sub_tbl_names -- zero or more tables to MERGE
    """
    return 'UNION=(%s)' % ', '.join(sub_tbl_names)

def insert_method_option(insert_method):
    """The INSERT_METHOD=... table option, which determines which sub-table
    new rows are inserted into, if any.

    Args:
    method -- which sub-table are new rows inserted into, if any? either
        'NO', 'FIRST', or 'LAST'
    """
    return 'INSERT_METHOD=%s' % insert_method


def sub_tables(cursor, table_name):
    ddl = show_create_table(cursor, table_name)
    union = re.findall(r"UNION=\(([^)]*)\)", ddl)
    if len(union) == 1:
        # iterate through union paren enclosed substring and strip quotes
        return [table[1:-1] for table in union[0].split(',')]
    else:
        raise Exception("Can't find UNION option in table specification: %s" % ddl)


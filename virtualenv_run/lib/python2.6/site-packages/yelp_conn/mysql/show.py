"""
Utility methods for auditing the database, for example to
ensure that all text is in ASCII, or to find the largest
table.

This isn't a logic mixin because the front-end should never
audit the database directly.
"""

from itertools import groupby

from common import get_rows


def show_tables(cursor):
    """
    Run a SHOW TABLES statement and return a list
    containing the names of all tables in the database.

    This should be a relatively fast query (about 0.03s in testing)
    """
    cursor.execute("SHOW TABLES")
    return [r[0] for r in cursor.fetchall()]

def show_table_status(cursor, tbl_name):
    """
    Run SHOW TABLE STATUS WHERE Name = 'tbl_name'
    and return a dictionary containing the key 'Name', and
    other information about a given table, or None if there is
    no such table. See:

    http://dev.mysql.com/doc/refman/5.0/en/show-table-status.html
    """
    sql = "SHOW TABLE STATUS WHERE Name = %(tbl_name)s"
    rows = get_rows(cursor, sql, locals())
    return rows[0] if rows else None

def show_status_for_tables_like(cursor, tbl_pattern):
    """
    Run SHOW TABLE STATUS WHERE Name LIKE 'tbl_pattern'
    and return a list of dictionaries containing the key 'Name', and
    other information about a given table, or None if there is
    no such table. See:

    http://dev.mysql.com/doc/refman/5.0/en/show-table-status.html
    """
    sql = "SHOW TABLE STATUS WHERE Name LIKE %(tbl_pattern)s"
    return get_rows(cursor, sql, locals())

def show_table_statuses(cursor):
    """
    Run a SHOW TABLE STATUS statement and return
    a list of dictionaries containing information
    about all tables. See:

    http://dev.mysql.com/doc/refman/5.0/en/show-table-status.html

    This takes several seconds on the yelp database.
    """
    return get_rows(cursor, "SHOW TABLE STATUS")

def show_columns(cursor, tbl_name, full=True):
    """
    Run SHOW [FULL] COLUMNS FROM table_name and return a
    list of dictionaries containing 'Field' (the column name) and
    other information about columns in the given table. See:

    http://dev.mysql.com/doc/refman/5.0/en/show-columns.html

    full -- if this is True, include the Collation, Privileges, and Comment
    fields (doesn't seem to be any slower with full=True, so we include
    it by default)
    """
    sql = "SHOW %sCOLUMNS FROM %s" % ('FULL ' if full else '', tbl_name)
    return get_rows(cursor, sql)

def show_indexes(cursor, tbl_name):
    """
    Run SHOW INDEX FROM tbl_name to get a list of
    dictionaries containing information
    about indices for the given table. See:

    http://dev.mysql.com/doc/refman/5.0/en/show-index.html

    This returns one dictionary per index, with the keys
    Non_unique, Key_name, Index_type, Comment, Packed, and
    cols, where cols points to a list of dictionaries
    containing information about each column in the index,
    with keys Column_name, Collation, Cardinality, Sub_part,
    and Null
    """
    index_keys = ('Non_unique', 'Key_name', 'Index_type', 'Comment', 'Packed')
    col_keys = ('Column_name', 'Collation', 'Cardinality',
        'Sub_part', 'Null')


    rows = get_rows(cursor, "SHOW INDEX FROM %s" % tbl_name)

    # package up rows

    results = []

    for col_name, cols in groupby(rows, key=lambda r: r['Key_name']):
        cols = list(cols)
        index_info = dict((k,cols[0][k]) for k in index_keys)
        index_info['cols'] = [dict((k,c[k]) for k in col_keys) for c in cols]
        results.append(index_info)

    return results

def show_create_table(cursor, table):
    """
    Return the CREATE TABLE definition for the given table,
    or None if we can't find the table.
    """
    sql = 'SHOW CREATE TABLE %s' % table
    rows = get_rows(cursor, sql)
    if rows:
        return rows[0]['Create Table']
    else:
        return None




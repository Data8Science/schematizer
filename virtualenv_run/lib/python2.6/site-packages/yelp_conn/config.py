# -*- coding: utf-8 -*-
"""
:mod:`yelp_conn` is configured using :mod:`staticconf` and the ``yelp_conn``
namespace.  This module contains some general configuration settings.

.. note::

    As part of future releases there will be work to move these settings
    into more specific modules that read the settings directly. Reading
    a configuration variable from this module is discoraged and could
    break in the future without warning.

    :mod:`yelp_conn` configuration should only be read by internal
    modules


Loading Configuration
=====================

Load a configuration file using a staticconf loader.

Example using a yaml configuration file:

.. code-block:: python

    import staticconf, yelp_conn.config

    staticconf.YamlConfiguration('yelp_conn.yaml',
                                 namespace=yelp_conn.config.namespace)


Settings
========

Required
--------

These must be provided before calling :func:`yelp_conn.initialize`

``topology``
    File path to a yelp_conn topology.  This filename can be a relative or absolute path.

Optional
--------

``connection_set_file``
    The name of a file which contains a connection set mapping.  This mapping
    can also be included in the topology file.

    NOTE: You must specify connection sets along with your topology. If you
    don't specify any connection sets then yelp_conn will not know what
    connections should have access to which parts of your topology.

``connection_wrappers``
    A list of class names which will be instantiated and used to wrap database
    connections.

    Example:

    .. code-block:: yaml

        connection_wrappers:
            - yelp_conn.sqllogger.LoggingConnectionWrapper
            - yelp_conn.wrappers.AnnotatingConnectionWrapper


    There are many connection wrappers included with yelp_conn, some of which
    have their own configuration options. The wrapper configuration options are
    also specified under the `yelp_conn` namespace.  Connection wrappers
    usually have an associate cursor wrapper.

    See :mod:`yelp_conn.sqllogger` and :mod:`yelp_conn.wrappers`.


``pool listeners``
    A list of classes implementing `on_checkout` and `on_connect`. Service and
    utility authors can also write their own pool listeners. For an example,
    see class`util.ranger_common.listener.RangerPoolListener` in `yelp-main` which
    tracks database connection usage.


Examples
========

:mod:`yelp_conn` uses :mod:`staticconf` for its configuration which
supports many file formats.  Below is an example of a configuration using a
yaml config file.

.. code-block:: yaml

    topology: '/path/to/topology_file.yaml'
    connection_set_file: './my_conenction_sets.yaml'

    connection_wrappers:
        - yelp_conn.sqllogger.LoggingConnectionWrapper
        - yelp_conn.wrappers.AnnotatingConnectionWrapper

    query_logging_listeners:
        - ['yelp_conn.sqllogger.ClogCursorListener', 'tmp_query_log']

    # Log queries to all listeners in `query_logging_listeners`
    enable_query_logging: True
    # Print queries to stdout
    enable_query_printing: True



"""
import staticconf

namespace = 'yelp_conn'
conn_conf = staticconf.NamespaceGetters(namespace)


topology = conn_conf.get('topology',
        help="Database topology filename or dict.")

connection_set_file = conn_conf.get_string('connection_set_file', default=None,
        help="Connection set yaml file used with the topology.")

# connection_wrappers is a list of fully-qualified dotted paths to
# wrapper classes to be injected into
# yelp_conn.getters.setup_mysql_connection at runtime
# ex: ['yelp_lib.snappy.wrappers.SnappyDBConnectionWrapper']
#
# wrappers' __init__ must take **kwargs, which will provide all the
# necessary args (and possibly some extraneous ones, which should be
# ignored)
#
# if you need to add more stuff, edit wrapper_kwargs in
# yelp_conn.getters._apply_injected_wrappers
connection_wrappers = conn_conf.get_list('connection_wrappers', default=[],
        help="a list of fully-qualified dotted paths to wrapper classes. "
            "Used to wrap connection objects.")

interactive_db_connections = conn_conf.get_bool('interactive_db_connections',
    default=False, help="Set to True if yelp_conn is being used interactively.")

# Called from sqlchecker (wrapper, and listener)
enable_clog_queries = conn_conf.get_bool('enable_clog_queries', default=False)

# Enable and configure LoggingConnectionWrapper
enable_query_logging = conn_conf.get_bool('enable_query_logging', default=False)
enable_query_logging_explain = conn_conf.get_bool('enable_query_logging_explain', default=False)
enable_query_printing = conn_conf.get_bool('enable_query_printing', default=False)
enable_query_printingexplaining = conn_conf.get_bool('enable_query_printingexplaining', default=False)
enable_slow_query_logging = conn_conf.get_bool('enable_slow_query_logging', default=False)
query_logging_callstack_filter = conn_conf.get('query_logging_callstack_filter', default=None)
query_logging_filter = conn_conf.get('query_logging_filter', default=None)
query_logging_listeners = conn_conf.get_list('query_logging_listeners', default=())

# Configuration for LoggingCursorWrapper
slow_query_logger_threshold = conn_conf.get_float('slow_query_logger_threshold',
    default=0.0)

# Enable CheckExplainConnectionWrapper (aka gross query checker)
enable_gross_query_checking = conn_conf.get_bool('enable_gross_query_checking', default=True)

# Settings for CheckExplainCursorWrapper
gross_query_check_threshold = conn_conf.get_float('gross_query_check_threshold', default=2)
gross_query_check_table_row_threshold = conn_conf.get_float('gross_query_check_table_row_threshold', default=20)
explain_plan_listeners = conn_conf.get_list('explain_plan_listeners', default=())
whitelisted_queries = conn_conf.get('whitelisted_queries', default={},
    help="Map of whitelisted queries which will not trigger gross query errors.")

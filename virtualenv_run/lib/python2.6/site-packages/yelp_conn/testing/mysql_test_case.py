# -*- coding: utf-8 -*-
"""A test case for things that manipulate a MySQL database directly. This
sets up a temporary MySQL daemon for each test, and cleans it up afterward.

.. deprecated:: 3.0.2

.. warning::

    This module is deprecated. Use :mod:`yelp_conn.testing.sandbox` directly.

"""
from testify import TestCase
from testify import assert_equal
from testify import class_setup_teardown
from testify import setup_teardown

from yelp_conn.mysql.misc import use
from yelp_conn.mysql.show import show_columns
from yelp_conn.mysql.show import show_indexes

from yelp_conn.testing import sandbox


class MySQLTestCase(TestCase):
    __test__ = False

    # Set this to true to have mysqld/cursor/conn setup during class_setup.
    # False to set them up per test.
    __reuse_mysqld_for_tests__ = False

    # If true, then no user name is required to connect to the daemon. If false, then
    # you can only connect as root, and then you can setup and test users and grants.
    __insecure__ = True

    def start_sandbox(self):
        self._username = 'root' if not self.__insecure__ else ''

        config = {
            '--skip-grant-tables': sandbox.Flag if self.__insecure__ else None,
        }
        with sandbox.start(config=config) as self.daemon:
            with sandbox.database(self.daemon,
                                  user=self._username) as self._db_name:
                conn = self.daemon.get_dbi_conn(user=self._username)
                with conn as self.cursor:
                    use(self.cursor, self._db_name)
                    yield
                    self.cursor.execute('ROLLBACK')

    @setup_teardown
    def start_sandbox_per_test(self):
        if self.__reuse_mysqld_for_tests__:
            return iter((None, ))

        return self.start_sandbox()

    @class_setup_teardown
    def start_sandbox_per_class(self):
        if not self.__reuse_mysqld_for_tests__:
            return iter((None, ))

        return self.start_sandbox()

    def assert_tables_have_same_column_defs(self, tbl_name1, tbl_name2):
        """Use SHOW COLUMNS to check that two tables have the same
        column definitions."""
        # 'Key' field is really about indexes, so strip it out
        def strip_Key(column_defs):
            for column_def in column_defs:
                del column_def['Key']
            return column_defs

        assert_equal(strip_Key(show_columns(self.cursor, tbl_name1)),
                     strip_Key(show_columns(self.cursor, tbl_name2)))

    def assert_tables_have_same_index_defs(self, tbl_name1, tbl_name2):
        """Use SHOW INDEXES to check that two tables have the same
        index definitions (including ordering and name)."""
        # 'Cardinality' field changes depending on table contents,
        # so strip it out
        def strip_Cardinality(index_defs):
            for index_def in index_defs:
                for col_info in index_def['cols']:
                    del col_info['Cardinality']
            return index_defs

        assert_equal(strip_Cardinality(show_indexes(self.cursor, tbl_name1)),
                     strip_Cardinality(show_indexes(self.cursor, tbl_name2)))

# -*- coding: utf-8 -*-
"""Resource for a replication delay."""

import BaseHTTPServer
import SocketServer
import re
import socket
import threading
import time

from testify import TestCase, class_setup, class_teardown


# TODO: replace this module with existing docker containers


# This url should match the path component in util/replication_delay.py
DELAY_URL_PATH = '/repl_delay/show/'

class ThreadedHTTPServer(SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    request_queue_size = 100 # reduce chance of connection refused errors

class ReplicationDelayServer(BaseHTTPServer.BaseHTTPRequestHandler):
    """
       This creates a server in the sandbox that can send replication delay responses.

       It always returns 1s, except for the following special types ;
          * dead, returns 10 after 3 seconds
          * custom:.*, returns whatever comes after the 'custom:'
    """
    def log_request(self, code='-', size='-'):
        """Only log error responses"""
        if code != 200:
            BaseHTTPServer.BaseHTTPRequestHandler.log_request(self, code, size)

    def do_GET(self):
        match = re.search (DELAY_URL_PATH + 'custom:(.*)', self.path)
        if match is not None:
            response = match.group(1)
        else:
            if self.path == '/repl_delay/show/dead':
                response = '10'
            else:
                response = '1'


        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.send_header('Content-length', len(response))
        self.end_headers()
        if self.path == '/repl_delay/show/dead':
            time.sleep(7)
        self.wfile.write(response)


class ReplicationDelayThread(threading.Thread):
    """Thread that runs the ReplicationDelayServer"""
    def __init__(self, server_address):
        super(ReplicationDelayThread, self).__init__()
        self.__quit = False
        self.server = ThreadedHTTPServer(server_address, ReplicationDelayServer)
        self.server.timeout = 1

    def run(self):
        while not self.__quit:
            self.server.handle_request()

    def quit(self):
        self.server.socket.shutdown(socket.SHUT_RDWR)
        self.__quit = True

class ReplicationDelayTestCase(TestCase):

    @class_setup
    def start_mock_repldelay_service(self):
        self.host = 'localhost'
        self.thread = ReplicationDelayThread((self.host, 0))
        self.port = self.thread.server.socket.getsockname()[1]
        self.thread.start()

    @class_teardown
    def stop_mock_repldelay_service(self):
        self.thread.quit()
        self.thread.join()

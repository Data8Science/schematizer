from testify import run

from yelp_conn.mysql.alter import add_index
from yelp_conn.mysql.alter import add_primary_key
from yelp_conn.mysql.alter import add_unique_index
from yelp_conn.mysql.alter import alter_table
from yelp_conn.mysql.alter import rename_table
from yelp_conn.mysql.alter import rename_tables
from yelp_conn.mysql.create import column
from yelp_conn.mysql.create import create_table
from yelp_conn.mysql.create import index
from yelp_conn.mysql.create import primary_key
from yelp_conn.mysql.create import unique_index
from yelp_conn.testing.mysql_test_case import MySQLTestCase


class TestAlterTable(MySQLTestCase):

    def test_no_clauses_means_noop(self):
        create_table(self.cursor, 'foo', column('x', 'INT'))
        alter_table(self.cursor, 'foo')

    def test_add_index(self):
        # can we create a table, then add an index,
        # and get the same table?
        #
        # PRIMARY_KEY implies NOT NULL in table def but not when
        # adding it, so make the id field NOT NULL
        columns = [column('id', 'INT', null=False),
                   column('first_name', 'VARCHAR(255)'),
                   column('last_name', 'VARCHAR(255)')]

        indexes = [primary_key('id'),
                   index('first_name'),
                   unique_index('last_name', 'first_name')]

        create_table(self.cursor, 'employee',
                     *(columns + indexes))

        create_table(self.cursor, 'employee_copy', *columns)

        self.assert_tables_have_same_column_defs('employee', 'employee_copy')

        alter_table(self.cursor, 'employee_copy',
                    add_primary_key('id'),
                    add_index('first_name'),
                    add_unique_index('last_name', 'first_name'))

        self.assert_tables_have_same_index_defs('employee', 'employee_copy')

    def test_rename_table(self):
        columns = [column('id', 'INT', null=False),
                   column('first_name', 'VARCHAR(255)'),
                   column('last_name', 'VARCHAR(255)')]

        indexes = [primary_key('id'),
                   index('first_name'),
                   unique_index('last_name', 'first_name')]

        create_table(self.cursor, 'employee',
                     *(columns + indexes))

        create_table(self.cursor, 'employee_copy',
                     *(columns + indexes))

        # control: tables have same columns and index
        self.assert_tables_have_same_column_defs('employee', 'employee_copy')
        self.assert_tables_have_same_index_defs('employee', 'employee_copy')

        rename_table(self.cursor, 'employee_copy', 'employee_rename')

        # test: moved table is still the same
        self.assert_tables_have_same_column_defs('employee', 'employee_rename')
        self.assert_tables_have_same_index_defs('employee', 'employee_rename')

        rename_tables(self.cursor, [('employee', 'employee_tables_rename'),
                                    ('employee_rename', 'employee')])

        # test: swaparoo
        self.assert_tables_have_same_column_defs('employee_tables_rename', 'employee')
        self.assert_tables_have_same_index_defs('employee_tables_rename', 'employee')

        rename_tables(self.cursor, {
            'employee': 'employee_dict_rename',
            'employee_tables_rename': 'employee_rename'})

        # test: dict args
        self.assert_tables_have_same_column_defs('employee_dict_rename', 'employee_rename')
        self.assert_tables_have_same_index_defs('employee_dict_rename', 'employee_rename')

if __name__ == '__main__':
    run()

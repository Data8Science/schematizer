# -*- coding: utf-8 -*-
from testify import run, assert_equal, setup_teardown

from yelp_conn.mysql.create import create_table, column, primary_key, index
from yelp_conn.mysql.create import unique_index
from yelp_conn.mysql.drop import drop_table
from yelp_conn.mysql.show import show_columns
from yelp_conn.mysql.show import show_indexes
from yelp_conn.mysql.show import show_tables
from yelp_conn.mysql.show import show_table_status
from yelp_conn.mysql.show import show_table_statuses
from yelp_conn.testing.mysql_test_case import MySQLTestCase


class TestShowStatements(MySQLTestCase):

    __reuse_mysqld_for_tests__ = True

    @setup_teardown
    def setup_table(self):
        columns = [
            column('id', 'INT', null=False),
            column('first_name', 'VARCHAR(255)'),
            column('last_name', 'VARCHAR(255)')]

        indexes = [
            primary_key('id'),
            index('first_name'),
            unique_index('last_name', 'first_name')]

        create_table(self.cursor, 'employee', *(columns + indexes))
        yield
        drop_table(self.cursor, 'employee')

    def test_show_tables(self):
        # make sure there are some columns; otherwise
        # we're not testing anything
        tables = show_tables(self.cursor)
        self.assert_(isinstance(tables, list))
        self.assert_(tables)

    def test_show_table_status(self):
        tables = show_tables(self.cursor)

        # run show_table_status() for all tables
        table_status_map = {}
        for table in tables:
            status = show_table_status(self.cursor, table)
            self.assert_(isinstance(status, dict))
            assert_equal(status['Name'], table)
            table_status_map[table] = status

        # now compare show_table_statuses() against show_table_status()
        table_statuses_map = {}

        for status in show_table_statuses(self.cursor):
            table_statuses_map[status['Name']] = status

        # status can change for any given table, so only compare
        # keys that we expect not to change
        keys_to_compare = ('Engine', 'Row_Format', 'Name', 'Create_options', 'Version', 'Collation', 'Max_data_length', 'Create_time')

        for table in set(table_status_map.keys() + table_statuses_map.keys()):
            def get_status(map, table):
                status = map.get(table)
                self.assert_(status is not None)
                return dict((k, v) for (k, v) in status.items() if k in keys_to_compare)

            assert_equal(get_status(table_status_map, table), get_status(table_statuses_map, table))

    def test_show_columns_and_index(self):
        tables = show_tables(self.cursor)

        for table in tables:
            columns = show_columns(self.cursor, table)
            self.assert_(columns)
            indexes = show_indexes(self.cursor, table)
            self.assert_(isinstance(indexes, list))

            # make sure every index references only real
            # columns, and that cardinality increases monotonically
            # (this ensures that we've packed up the index
            # info in the right order)
            self.assert_(indexes)
            col_names = set(c['Field'] for c in columns)
            for index_ in indexes:
                prev_cardinality = None
                for index_col in index_['cols']:
                    self.assert_(index_col['Column_name'] in col_names)
                    self.assert_(index_col['Cardinality'] >= prev_cardinality)
                    prev_cardinality = index_col['Cardinality']


if __name__ == '__main__':
    run()

# -*- coding: utf-8 -*-
import sqlalchemy
import testify as T

from yelp_conn.mysql.delete import delete_with_limit
from yelp_conn.testing.sqlalchemy_test_case import SQLAlchemyTestCase


class DeleteWithLimitTestCase(SQLAlchemyTestCase):

    __reuse_mysqld_for_tests__ = True

    @T.setup
    def create_test_table(self):
        self.test_table = sqlalchemy.Table(
            'delete_with_limit_test_table',
            sqlalchemy.MetaData(),
            sqlalchemy.Column('id', sqlalchemy.Integer, primary_key=True),
            mysql_engine='InnoDB',
        )

        with self.session_begin() as session:
            self.test_table.create(session.bind)

    def test_delete_with_limit(self):
        rows = []
        for id_value in xrange(1, 11):
            rows.append(dict(id=id_value))
        with self.session_begin() as session:
            session.execute(self.test_table.insert(), rows)

        with self.session_begin() as session:
            T.assert_equal(10, session.query(self.test_table).count())
            delete_query = delete_with_limit(self.test_table).limit(7)

            # Make sure we don't allow delete_with_limit without an order_by
            T.assert_raises(AssertionError, session.execute, delete_query)
            T.assert_equal(10, session.query(self.test_table).count())

            # Now include an order_by and delete stuff
            delete_query = delete_query.order_by(self.test_table.columns.id)
            session.execute(delete_query)
            T.assert_equal(3, session.query(self.test_table).count())
            session.execute(delete_query)
            T.assert_equal(0, session.query(self.test_table).count())


if __name__ == '__main__':
    T.run()

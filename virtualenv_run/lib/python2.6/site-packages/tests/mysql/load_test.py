# -*- coding: utf-8 -*-
from __future__ import with_statement

import cStringIO
import os
import shutil
import tempfile
from datetime import datetime

from testify import run, assert_equal, assert_empty, TestCase, setup_teardown
from yelp_conn.mysql.create import column
from yelp_conn.mysql.create import create_table
from yelp_conn.mysql.load import _esc_for_infile
from yelp_conn.mysql.load import load_data
from yelp_conn.mysql.load import load_data_infile
from yelp_conn.mysql.load import write_row_to_infile
from yelp_conn.testing.mysql_test_case import MySQLTestCase



class TestWriteRowToInfile(TestCase):

    def test_escaping(self):
        # escape all the kinds of things we know how to escape
        f = cStringIO.StringIO()
        cafe = u'caf\xe9'  # test unicode
        birthday = datetime.utcfromtimestamp(723924163)
        write_row_to_infile(f, [123.45, 'hello', None, -43, cafe, True, birthday])

        assert_equal('123.45\thello\t\\N\t-43\t%s\t1\t723924163\n' % cafe.encode('utf-8'), f.getvalue())

class TestLoadDataInfile(MySQLTestCase):


    @setup_teardown
    def create_temp_dir(self):
        self.testing_temp_dir = tempfile.mkdtemp()
        try:
            yield
        finally:
            shutil.rmtree(self.testing_temp_dir)

    def create_dishes_table(self):
        create_table(self.cursor, 'dishes',
                     column('id', 'INT', null=False),
                     column('restaurant_id', 'INT', null=False),
                     column('name', 'VARCHAR(255)'),
                     column('alt_name', 'VARCHAR(255)'),
                     column('heading', 'VARCHAR(255)'),
                     column('price', 'DOUBLE'),
                     charset='utf8',
                     collate='utf8_unicode_ci',
                     engine='MyISAM')


    def test_load_rows(self):
        rows = [(7, 3, u'Phở Gà', 'Chicken Noodle Soup', 'Noodles', 6.95),
                (8, 3, 'Cassava Cake', None, 'Desserts', 3.00)]

        filename = os.path.join(self.testing_temp_dir, 'data.infile')
        with open(filename, 'w') as f:
            f.write('IGNORE THIS LINE\n')
            for row in rows:
                write_row_to_infile(f, row)

        self.create_dishes_table()

        # load the rows, and read them back
        load_data_infile(self.cursor, filename, 'dishes', ignore_lines=1)
        self.cursor.execute('SELECT * FROM dishes')
        assert_equal(set(rows), set(tuple(row) for row in self.cursor.fetchall()))

    def test_load_rows_column_order(self):
        rows = [(7, 3, u'Phở Gà', 'Chicken Noodle Soup', 'Noodles', 6.95),
                (8, 3, 'Cassava Cake', None, 'Desserts', 3.00)]
        # Reorder columns before writing
        reordered_rows = [('Chicken Noodle Soup', 'Noodles', 7, u'Phở Gà', 6.95, 3),
                          (None, 'Desserts', 8, 'Cassava Cake', 3.00, 3)]
        reordered_columns = ['alt_name', 'heading', 'id', 'name', 'price', 'restaurant_id']

        filename = os.path.join(self.testing_temp_dir, 'data.infile')
        with open(filename, 'w') as f:
            for row in reordered_rows:
                write_row_to_infile(f, row)

        self.create_dishes_table()

        # load the rows, and read them back
        load_data_infile(self.cursor, filename, 'dishes', column_names=reordered_columns)
        self.cursor.execute('SELECT * FROM dishes')
        assert_equal(set(rows), set(tuple(row) for row in self.cursor.fetchall()))

    def test_load_escaped_rows(self):
        """Test non-default escaping options"""
        rows = [(7, 3, u'Phở Gà', 'Chicken Noodle Soup', 'Noodles', 6.95),
                (8, 3, 'Cassava Cake', None, 'Desserts', 3.00)]

        # create a temp file to load from
        _, tmp_path = tempfile.mkstemp(dir=self.testing_temp_dir)
        with open(tmp_path, 'wb') as tmp_file:
            # create a csv with odd format
            for row in rows:
                line = '>>>>'  # line start
                line += ','.join(map(_esc_for_infile, row))  # ',' field terminator
                line += '<<<<\t\r\n'  # line terminator
                tmp_file.write(line)

        # with input file prepared, create table and load data
        self.create_dishes_table()
        load_data_infile(
            self.cursor,
            tmp_path,
            'dishes',
            local=True,
            replace=True,
            field_terminate=r"','",
            field_enclose=r"''",
            field_escaped=r"'\\'",
            line_start=r"'>>>>'",
            line_terminate=r"'<<<<\t\r\n'",
        )
        os.remove(tmp_path)

        # check that result was loaded correctly
        self.cursor.execute('SELECT * FROM dishes')
        assert_equal(set(rows), set(tuple(row) for row in self.cursor.fetchall()))

    def test_load_data(self):
        fieldnames = ['id', 'restaurant_id', 'name', 'alt_name', 'heading', 'price']

        rows = [(7, 3, u'Phở Gà', 'Chicken Noodle Soup', 'Noodles', 6.95),
                (8, 3, 'Cassava Cake', None, 'Desserts', 3.00)]

        dicts = [dict(zip(fieldnames, row)) for row in rows]

        self.create_dishes_table()
        load_data(self.cursor, 'dishes', fieldnames, dicts,
                  temp_dir=self.testing_temp_dir)
        self.cursor.execute('SELECT * FROM dishes')
        assert_equal(set(rows), set(tuple(row) for row in self.cursor.fetchall()))
        assert_empty(os.listdir(self.testing_temp_dir))

if __name__ == '__main__':
    run()

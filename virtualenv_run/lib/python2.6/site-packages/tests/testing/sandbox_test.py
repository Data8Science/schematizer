# -*- coding: utf-8 -*-
import os
import tempfile

import MySQLdb
from sqlalchemy import Column, Integer, MetaData, String, Table
from sqlalchemy.orm import clear_mappers, mapper
from testify import TestCase, setup, setup_teardown
from testify.assertions import assert_equal, assert_not_in, assert_in
from testify.assertions import assert_raises

from yelp_conn.testing import sandbox


class StartTestCase(TestCase):

    def test_start(self):
        with sandbox.start(max_delay=4) as mysqld:
            assert_equal(os.path.exists(mysqld.socket), True)
        assert_equal(os.path.exists(mysqld.socket), False)


class DatabaseContextTestCase(TestCase):

    @setup_teardown
    def setup_db(self):
        with sandbox.start(max_delay=4) as self.mysqld:
            yield

    def get_db_names(self):
        conn = self.mysqld.get_conn()
        with conn.begin():
            return [row for row, in conn.execute('show databases')]

    def test_database(self):
        with sandbox.database(self.mysqld) as db_name:
            assert_in(db_name, self.get_db_names())
        assert_not_in(db_name, self.get_db_names())


class BuildConfigTestCase(TestCase):

    @setup
    def setup_path(self):
        self.path = '/some/tmp/path'

    def test_config_no_overrides(self):
        config = sandbox.build_config({}, self.path)
        assert_equal(config['--pid-file'], self.path + '/mysqld.pid')

    def test_config_additional_args(self):
        config_regular = sandbox.build_config({}, self.path)
        config_additional = sandbox.build_config({'--core-file': sandbox.Flag}, self.path)
        assert_in('--core-file', config_additional)
        assert_not_in('--core-file', config_regular)
        assert_equal(len(config_regular) + 1, len(config_additional))

    def test_config_override(self):
        config = sandbox.build_config({'--log-warnings': None}, self.path)
        assert_equal(config['--log-warnings'], None)


class BuildArgsTestCase(TestCase):

    @setup
    def setup_config(self):
        self.path = '/some/tmp/path'
        self.config = sandbox.build_config({'--tmpdir': None}, self.path)

    def test_build_args(self):
        args = list(sandbox.build_args(self.config))
        assert_not_in('--tmpdir', args)
        assert_in('--log-warnings', args)
        assert_in('--socket=/some/tmp/path/mysqld.sock', args)


class ConnectionSetContextTestCase(TestCase):

    def test_connection_set_context(self):
        with sandbox.connection_set_context() as conn_set:
            with conn_set.test_cluster as cursor:
                cursor.execute('select now()')
        assert_raises(MySQLdb.OperationalError, cursor.execute, 'select 1')

    def test_connection_set_context_with_fixtures(self):
        schema_filename = tempfile.mktemp()
        open(schema_filename, 'w').write('CREATE TABLE FOO(bar int(1));')
        with sandbox.connection_set_context(fixtures=[schema_filename]) as conn_set:
            with conn_set.test_cluster as cursor:
                cursor.execute('INSERT INTO FOO VALUES(1)')
                cursor.execute('select now()')
        assert_raises(MySQLdb.OperationalError, cursor.execute, 'select 1')
        os.unlink(schema_filename)

    def test_connection_set_context_smoke_with_named_db(self):
        with sandbox.connection_set_context(db_name='smoke') as conn_set:
            with conn_set.test_cluster as cursor:
                cursor.execute('select now()')
        assert_raises(MySQLdb.OperationalError, cursor.execute, 'select 1')


class ModelForTesting(object):
    pass


class SQLAlchemyMixin(object):
    cluster_name = 'test_cluster'

    @setup_teardown
    def setup_teardown_orm_mappers(self):
        self.metadata = MetaData()

        model_for_testing_table = Table("model_table", self.metadata,
                Column('id', Integer, primary_key=True),
                Column('key', String(32)),
                Column('value', String(32)),
                info=dict(cluster_name='test_cluster'))
        mapper(ModelForTesting, model_for_testing_table)

        try:
            yield
        finally:
            clear_mappers()

    def create_all(self, conn_set):
        rw_engine = conn_set.get_engine(self.cluster_name)
        self.metadata.create_all(bind=rw_engine)

class SessionmakerContextTestCase(TestCase, SQLAlchemyMixin):
    def test_session_context(self):
        with sandbox.sessionmaker_context() as (sessionmaker, conn_set):
            self.create_all(conn_set)
            session = sessionmaker()
            with session.master_connection_set:
                assert_equal(session.query(ModelForTesting).first(), None)
            session.close()

    def test_session_use_context(self):
        with sandbox.sessionmaker_context(use_use=True) as (sessionmaker, conn_set):
            self.create_all(conn_set)
            session = sessionmaker(default_engine_name=self.cluster_name)
            with session.writeable():
                with session.use('testing'):
                    assert_equal(session.query(ModelForTesting).first(), None)
            session.close()

class ScopedSessionContextTestCase(TestCase, SQLAlchemyMixin):
    def test_session_context(self):
        with sandbox.scoped_session_context() as (scoped_session, conn_set):
            self.create_all(conn_set)
            with scoped_session.master_connection_set:
                assert_equal(scoped_session.query(ModelForTesting).first(), None)

# -*- coding: utf-8 -*-
"""
Utility methods for working with and introspecting into objects.
"""

from .arguments import NULL_ARG
from .containers.dicts import link_path_to_chain
from .iteration import first

def getattr_deep(x, path='', default=None):
    """The equivalent of getattr(x, link) for multiple levels,
    so we can do something like business.selected_review.review without
    getting a crash if business.selected_review is None.

    Arguments:
        path - a dot-separated list of fields to walk
            ('selected_review.review' in the above example).
        default - return this if the chain is broken at any point
    """
    chain = link_path_to_chain(path)
    return getattr_deep_by_chain(x, chain, default=default)

def getattr_deep_by_chain(x, chain, default=None):
    """See getattr_deep; this provides an interface without needing
    to construct a period-separated path string.

    Arguments:
        chain - sequence (e.g., list or tuple) of fields to walk
        default - default value to return if any lookup fails
    """
    for link in chain:
        try:
            x = getattr(x, link)
        except AttributeError:
            return default

    return x

def getattr_invariant(iterable, key, on_error_return=NULL_ARG, attr_getter=getattr):
    """Get item.key for each item in iterable, and return the value if all are the same.

    Arguments:
        iterable - the iterable that we will iterate over
        key - the attr that we will get from each item in iterable
        on_error_return - if not all values are the same, we can choose to return a
            custom value instead of raising a ValueError. Defaults to
            arguments.NULL_ARG, so as to indicate that no input was
            given and we should fall back on default behavior (ie. crash)

    Examples:
        class MyObject(object): pass

        obj1 = MyObject()
        obj1.attr1 = 4

        obj2 = MyObject()
        obj2.attr1 = 4

        print getattr_invariant([obj1, obj2], 'attr1')  # prints 4

        obj2.attr1 = 3

        print getattr_invariant([obj1, obj2], 'attr1')  # raises ValueError
        print getattr_invariant([obj1, obj2], 'attr1', on_error_return=NULL_ARG)  # raises ValueError
        print getattr_invariant([obj1, obj2], 'attr1', on_error_return='Not Four!')  # prints 'Not Four!'

    """
    values = [attr_getter(item, key) for item in iterable]

    if len(set(values)) > 1:
        if on_error_return is NULL_ARG:
            raise ValueError(values)
        else:
            return on_error_return

    return first(values)


def getattrs(x, attrs):
    """Get multiple attrs from an object
    Returns a dictionary. If an attr does not exist on the object it will not be in the dictionary.
    """
    _dict = {}

    for attr in attrs:
        try:
            _dict[attr] = getattr(x, attr)
        except AttributeError:
            pass

    return _dict

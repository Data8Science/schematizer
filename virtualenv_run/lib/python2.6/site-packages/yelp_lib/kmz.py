"""
This module contains helper functions for working with KMZ files, which are just ZIP archives of KML
files.
"""

from lxml import etree
import re
import zipfile

from .containers.lists import one

class TextyDict(dict):
    """
    This is a normal dict, but with an additional 'tag' and 'text'
    attribute. This object is used for representing an XML element by
    load_as_dict().
    """

    def __init__(self, tag, text):
        super(TextyDict, self).__init__()
        self.tag = tag
        self.text = text

    def __repr__(self):
        return '<TextyDict tag="%s", text="%s", dict="%r">' % (self.tag, self.text, dict(self))

REMOVE_USELESS_NAMESPACE = re.compile(r'^{[^}]*}(.)')

def _load_as_dict_from_string(kml_data):
    # Turn into a TextyDict.
    def flatten_kml(e):
        if e is not None:
            tag = REMOVE_USELESS_NAMESPACE.sub(r'\1', e.tag)
            d = TextyDict(tag, e.text)
            for child in e:
                child_d = flatten_kml(child)
                tag = REMOVE_USELESS_NAMESPACE.sub(r'\1', child.tag)
                d[tag] = d.get(tag, []) + [child_d]
            return d
    return flatten_kml(etree.fromstring(kml_data))

def load_as_dict(kmz_filename, doc_file='doc.kml'):
    """
    Load a document from KMZ file as a dict.

    Args;
       kmz_filename -- the ZIP archive to load from
       doc_file -- the file within the zip to load, defaults to doc.kml
    Returns;
       A dictionary representation of the KML file.
    """
    z = zipfile.ZipFile(kmz_filename)
    return _load_as_dict_from_string(z.read(doc_file))

def mine_polygons(polygons):
    polys = []
    for polygon in polygons:
        coords_str = one(one(one(polygon['outerBoundaryIs'])['LinearRing'])['coordinates']).text.strip()
        # Notice that we drop the last coordinate.
        polys.append([map(float, s.split(',')[:2]) for s in coords_str.split()][:-1])
    return polys

"""
Utility methods for working with and introspecting into modules.
"""

import os
import sys


def get_module_version(module_name):
    __import__(module_name)
    module = sys.modules[module_name]
    return getattr(module, '__version__', None)


def guess_relative_module_path(path):
    """Try to convert the path to a module (i.e. __file__) to the path relative
    to one of our import paths, to make error reporting more succinct. If we
    can't, return the path as-is.

    Paths will be converted to the actual path, skipping any symlinks

    For example:
    '/nail/home/dave/pg/loc/util/ranger_common/fill.py' -> 'util/ranger_common/fill.py'
    '/scratch/dave/foo.py' -> '/scratch/dave/foo.py'

    Suggested usage is:

    from util.yelpy import guess_relative_module_path as rel
    rel(__file__)
    """
    try:
        path = os.path.realpath(path)
    except:
        return path

    shortest_so_far = path

    for import_path in sys.path:
        try:
            import_path = os.path.realpath(import_path)
        except:
            continue

        if not import_path.endswith('/'):
            import_path = import_path + '/'

        if path.startswith(import_path):
            rel_path = path[len(import_path):]
            if len(rel_path) < len(shortest_so_far):
                shortest_so_far = rel_path

    if shortest_so_far.endswith('.pyc'):
        shortest_so_far = shortest_so_far[:-1]

    return shortest_so_far

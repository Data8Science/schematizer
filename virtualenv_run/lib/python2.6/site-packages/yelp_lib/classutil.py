def standard_repr(attribute_names, true_repr=False):
    """Return a standardized `__repr__` method that returns a string object
    representation useful for interactive sessions.

    Arguments:
    attribute_names -- a list of attribute names on the instance that appear in
        the string representation. If any of these attributes do not exist on
        the object, their representation will be `NOT SET`.

    >>> class Example(object):
    ... 	attr_1 = ['a', 'b', 'c']
    ... 	__repr__ = standard_repr('attr_1', 'unset_attr')
    >>> Example()
    <Example(attr_1=['a', 'b', 'c'], unset_attr=NOT SET)>
    """

    class _NotSet(object):
        def __repr__(self):
            return 'NOT_SET'

    def __repr__(self):
        dict_representation = get_dict_representation(self, attribute_names, default=_NotSet())
        return format_object_repr(self, dict_representation, true_repr=true_repr)

    return __repr__


def get_dict_representation(_object, attribute_names, default=None):
    """Given an object and list of attribute_names, return a dictionary mapping
    the attribute_names to their values on the object (default to None)"""
    return dict(
        (attribute_name, getattr(_object, attribute_name, default))
            for attribute_name in attribute_names
    )


def format_object_repr(_object, dict_representation, true_repr=True):
    """Given a object and a dictionary representing kwargs for ___init__, return
    a string showing the class of the object being passed the dictionary as kwargs

    Args:
        true_repr - Should be True only if the class can actually be constructed by eval'ing the repr
            (function adds <> around the repr if this is False)

    Example:
        class MyObject(object): pass
        format_object_repr(MyObject(), {'foo': 'bar'}, true_repr=False) == "<MyObject(foo='bar')>"
    """
    repr_string = ", ".join("%s=%r" % key_value for key_value in dict_representation.iteritems())

    format = "%s(%s)"
    if not true_repr:
        format = "<%s>" % format

    return format % (_object.__class__.__name__, repr_string)


class cached_property(object):
    """Similar to the @property decorator, but memoizes the result of the computation.

    Memoization occurs by storing the result as an instance variable on the object.
    The cached value is stored in the instance's dict as "_cached_foo", where foo is
    the property name.

    Obviously this should only be used with cachable properties, but the cache can be
    busted in cases where it is known the property is stale.

    Use "del object.foo" to clear the cached value of cached_property foo. The
    next call to object.foo forces recomputation.

    Explicit assignment to the property will cache the given value.
    """

    def __init__(self, func):
        self._func = func

    def __get__(self, obj, cls):
        if obj is None:
            return self
        value = self._func(obj)
        vars(obj)[self._func.func_name] = value
        return value

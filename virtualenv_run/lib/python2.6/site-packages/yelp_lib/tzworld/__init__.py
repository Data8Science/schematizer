"""lookup timezones for the whole wide world"""
import logging
import sqlite3
import sys

import pytz

from geogrid import geogrid_for_size

# DB_PATH was updated to workaround the fact that bulkdata deploys aren't
# atomic. A simple update to the file would've caused a lot of apperrors and
# sadness. Check out CON-1529 for more exciting details.
DEFAULT_DB_PATH = '/nail/bulkdata/codedeps/tz_geoquad_2014_05_05.sqlite'

GRID_SIZE = 0.05

log = logging.getLogger('yapp.util.tzworld')

def search(longitude, latitude, db_location=None):
    """Get a list of timezones near longitude, latitude"""
    quad = geogrid_for_size(GRID_SIZE).quad(longitude, latitude)
    db_path = db_location if db_location else DEFAULT_DB_PATH
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('select tz from tz_geoquad where geoquad = :quad', {'quad': quad})
        rows = cursor.fetchall()
        cursor.close()
        conn.close()
    except Exception:
        log.warning("tz db %r not available", db_path)
        return []

    return [tz for tz, in rows]

def timezone_for_location(location, db_location=None):
    """Get the timezone for a location dictionary or None

    This arbitrarily picks the first timezone found near location (guessing whoever lives near
    timezone borders is used to bad times!)
    """
    if location['longitude'] is None or location['latitude'] is None:
        return
    for tz in search(location['longitude'], location['latitude'], db_location):
        try:
            return pytz.timezone(tz.encode('ascii', 'ignore'))
        except (IOError, pytz.UnknownTimeZoneError):
            log.error('unable to load timezone %r for location %r' % (tz, location))

__all__ = ['search', 'timezone_for_location']

if __name__ == '__main__':
    for tz in search(*map(float, sys.argv[1:3])):
        print tz

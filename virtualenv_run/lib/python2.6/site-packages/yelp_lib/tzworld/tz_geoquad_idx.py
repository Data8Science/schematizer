import sqlite3
import sys

import ogr

from geogrid import geogrid_for_size
from geogrid.geom import LngLatBounds
from yelp_lib.tzworld import GRID_SIZE


if __name__ == '__main__':

    input_filename = sys.argv[1]
    output_filename = sys.argv[2]

    db = sqlite3.connect(input_filename)
    db_output = sqlite3.connect(output_filename)
    cursor = db.cursor()

    db_output.cursor().execute("""
        create table if not exists tz_geoquad (geoquad integer, tz text)
        """)
    db_output.cursor().execute("""
        create unique index if not exists geoquad_tz_idx on tz_geoquad (geoquad, tz)
        """)

    r_curs = db.cursor()
    r_curs.execute("SELECT tzid, geometry FROM tz_world")

    output_cursor = db_output.cursor()

    db_output.isolation_level = None
    grid = geogrid_for_size(GRID_SIZE)

    def geom_overlaps_geoquad_for_lng_lat(geometry, lng, lat):
        """check to see if geometry overlaps the geoquad at lng, lat"""
        quad = grid.quad(lng, lat)
        quad_extent = grid.extent(quad)
        directions = dict(
            west = quad_extent.sw().lng(),
            south = quad_extent.sw().lat(),
            east = quad_extent.ne().lng(),
            north = quad_extent.ne().lat(),
        )
        quad_linestring = """POLYGON((%(west)s %(south)s, %(west)s %(north)s, %(east)s %(north)s, %(east)s %(south)s, %(west)s %(south)s))""" % directions
        quad_ring = ogr.CreateGeometryFromWkt(quad_linestring)
        quad_ring.CloseRings()
        if quad_ring.Within(geometry):
            return True
        intersection = quad_ring.Intersection(geometry)
        if intersection is not None:
            return intersection.GetArea() > 0.0
        return False

    def save(tzid, quads):
        for quad in quads:
            try:
                db_output.cursor().execute("""
                    INSERT INTO tz_geoquad (tz, geoquad) VALUES (?, ?) """, (tzid, quad))
                db_output.commit()
            except sqlite3.IntegrityError:
                pass

    i = 0
    for tzid, row_wkb in r_curs.fetchall():
        if tzid == 'none':
            continue
        geometry = ogr.CreateGeometryFromWkb(str(row_wkb))
        if geometry == None:
            continue
        tz_geometry = geometry.ConvexHull()
        west, east, south, north = tz_geometry.GetEnvelope()
        bounds = LngLatBounds(west, south, east, north)

        quads = set()
        for quad in grid.in_extent(bounds):
            lng, lat = grid.center(quad)
            if geom_overlaps_geoquad_for_lng_lat(tz_geometry, lng, lat):
                quads.add(quad)

        if not quads:
            print "no quads for", tzid
        else:
            save(tzid, quads)
        i += 1


"""
Utility functions for working with subprocesses.
"""

import subprocess
import sys
import time


def call_and_check(*args, **kwargs):
    """
    Run a command with subprocess and check its return value, raising an exception if it fails.

    Arguments to this function are the same as to subprocess.check_call,
    with the added optional argument error_msg which is the error message
    to print if the subprocess call has a non-zero exit code.
    """
    error_msg = None
    if 'error_msg' in kwargs:
        error_msg = kwargs['error_msg']
        del kwargs['error_msg']

    verbose = None
    if 'verbose' in kwargs:
        verbose = kwargs['verbose']
        del kwargs['verbose']

    try:
        subprocess.check_call(*args, **kwargs)
    except subprocess.CalledProcessError as e:
        if verbose:
            print >> sys.stderr, e
        if error_msg is not None:
            print >> sys.stderr, error_msg
        raise


#
# subprocess.check_output() is new in Python 2.7
# This is a backport courtesy of https://gist.github.com/839684
# and should be removed when we move to 2.7
#
def check_output(*popenargs, **kwargs):
    """Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute.

    The arguments are the same as for the Popen constructor.  Example:

    >>> check_output(["ls", "-l", "/dev/null"])
    'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'

    The stdout argument is not allowed as it is used internally.
    To capture standard error in the result, use stderr=STDOUT.

    >>> check_output(["/bin/sh", "-c",
    ...               "ls -l non_existent_file ; exit 0"],
    ...              stderr=STDOUT)
    'ls: non_existent_file: No such file or directory\n'
    """
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise subprocess.CalledProcessError(retcode, cmd)
    return output


def poll_for_a_period(proc, seconds_to_wait):
    """
    Poll process `proc` every second for `seconds_to_wait`.
    Return the returncode of the process (or None if the
    process does not terminate in `seconds_to_wait`).
    """
    count = 0
    while count < seconds_to_wait:
        time.sleep(1)
        count += 1
        returncode = proc.poll()

        # proc has not terminated
        if returncode is None:
            continue

        # proc process has terminated
        else:
            return returncode

    # proc did not terminate during poll()'s
    return None

# -*- coding: utf-8 -*-
from collections import deque


class MessageBuffer(object):
    """A buffer which accepts strings and stores messages and partial messages.
    """

    def __init__(self, separator):
        self.sep        = separator
        self.messages   = deque()
        self.partial    = []

    @property
    def has_messages(self):
        return len(self) > 0

    @property
    def has_partial(self):
        return len(self.partial) > 0

    def update(self, data):
        """Add new messages to the buffer."""
        if not data:
            return

        end_of_prev, messages, partial = self._split_data(data)
        if end_of_prev is not None:
            self._finish_partial(end_of_prev)
        self.messages.extend(messages)
        if partial:
            self.partial.append(partial)

    def _split_data(self, data):
        """Return the data split into three parts: end of the previous message,
        a list of complete messages, and a partial message.
        """
        messages = data.split(self.sep)
        if len(messages) == 1:
            return None, [], messages[0]

        return messages[0], messages[1:-1], messages[-1]

    def _finish_partial(self, end_of_message):
        """End the partial, and add it as a new message."""
        message = ''.join(self.partial) + end_of_message
        self.partial = []
        self.messages.append(message)

    def pop(self):
        """Return the oldest message, or None if there are no completed
        messages.
        """
        return self.messages.popleft() if len(self) else None

    def clear(self):
        """Clear out any partial messages and completed messages."""
        self.partial = []
        self.messages = deque()

    def __len__(self):
        """Return the number of messages buffered."""
        return len(self.messages)

    def __str__(self):
        tmpl = "%s(messages=%s, partial=%s)"
        return tmpl % (self.__class__.__name__, self.messages, self.partial)
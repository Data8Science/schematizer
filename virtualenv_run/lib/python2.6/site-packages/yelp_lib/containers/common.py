"""
Utility functions common to all container types.
"""


def hashify_nested(d):
    """Generate a hash for an arbitrary container or value. Recurses on keys
    / values / items containers.

    Returns: A hash value.
    """
    if isinstance(d, dict):
        return hash(tuple(sorted((k, hashify_nested(v)) for k, v in d.iteritems())))
    elif isinstance(d, (list, tuple)):
        return hash(tuple(hashify_nested(v) for v in d))
    else:
        return hash(d)


def _val_subtract(val1, val2, dict_subtractor, list_subtractor):
    """
    Find the difference between two container types

    Returns:

    The difference between the values as defined by list_subtractor() and
    dict_subtractor() if both values are the same container type.

    None if val1 == val2
    val1 if type(val1) != type(val1)
    Otherwise - the difference between the values
    """

    if val1 == val2:
        # if the values are the same, return a degenerate type
        # this case is not used by list_subtract or dict_subtract
        return type(val1)()

    if isinstance(val1, dict) and isinstance(val2, dict):
        val_diff = dict_subtractor(val1, val2)
    elif isinstance(val1, (list, tuple)) and isinstance(val2, (list, tuple)):
        val_diff = list_subtractor(val1, val2)
    else:
        val_diff = val1

    return val_diff

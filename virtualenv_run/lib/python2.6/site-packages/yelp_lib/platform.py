"""
Utility methods for doing OS-specific things.
"""
import errno
import os
import resource


def get_meminfo():
    """Get the memory statistics for the current process. Values are returned
    as kilobytes. The meanings of the fields are:
        virt -- virtual size
        res -- RSS size
        shr -- shared memory
        trs -- kilobytes from 'code' pages
        drs -- kilobytes from data/stack pages
        lrs -- kilobytes from library pages
        dt -- kilobytes from diry pages

        SEE ALSO: util/proc.py
    """
    pid = os.getpid()
    raw_file = None
    try:
        raw_file = open('/proc/%d/statm' % pid)
        data = raw_file.read().rstrip('\n')
        raw_file.close()
    except IOError:
        return dict()

    fields = ['virt', 'res', 'shr', 'trs', 'drs', 'lrs', 'dt']
    pagesize = resource.getpagesize()
    return dict((k, int(v) * pagesize >> 10) for k, v in zip(fields, data.split()))


def pid_exists(pid):
    """Is the pid `pid` a currently running process?"""
    try:
        # Signal 0 checks if a process can recieve signals (see `man kill`)
        os.kill(pid, 0)
        return True
    except OSError as err:
        # The pid does not exist if signaling 0 raised an error
        # and the error is not due to permissions
        return err.errno == errno.EPERM


def mkdir_p(path):
    """Mimic the functionality of mkdir -p

    Copied from http://stackoverflow.com/questions/600268/mkdir-p-functionality-in-python
    """
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST:
            pass
        else:
            raise

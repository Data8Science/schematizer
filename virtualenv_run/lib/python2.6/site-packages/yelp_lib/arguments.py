"""
Utility methods for manipulating function arguments.
"""

def kwargify(dict_data):
    """Copy `dict_data` and convert all unicode keys into str's, so the result can be used
    as kwargs.
    """
    # convert unicode keys into string keys
    kwargs = dict((str(key), val) for key, val in dict_data.iteritems() if isinstance(key, basestring))
    if len(kwargs) < len(dict_data):
        bad_keys_and_types = [(key, type(key)) for key in dict_data.iterkeys() if not isinstance(key, str)]
        raise ValueError('Invalid non-string types for keys: %r' % (bad_keys_and_types,))
    return kwargs

def min_not_none(*args, **kwargs):
    """
    Returns the minimim item that is not None, unless all items are None, in which case it returns None.
    """

    item_list = star_args_to_list(*args)

    not_none_item_list = [item for item in item_list if item is not None]
    if not not_none_item_list:
        # Its not a double negative.
        return None

    # Now we have a list with at least one item an no Nones, just call min
    return min(item for item in not_none_item_list, **kwargs)


def max_not_none(*args, **kwargs):
    """
    Returns the maximum item that is not None, unless all items are None, in which case it returns None.
    """

    item_list = star_args_to_list(*args)

    not_none_item_list = [item for item in item_list if item is not None]
    if not not_none_item_list:
        return None

    # Now we have a list with at least one item an no Nones, just call max
    return max(item for item in not_none_item_list, **kwargs)

def min_and_max(*args):
    item_list = star_args_to_list(*args)

    first_iteration = True

    for item in item_list:
        if first_iteration:
            min_value = max_value = item
            first_iteration = False
        else:
            min_value = min(min_value, item)
            max_value = max(max_value, item)

    if first_iteration:
        raise TypeError("Could not get min/max: empty sequence given.")

    return min_value, max_value

def star_args_to_list(*args, **kwargs):
    allow_single_value = kwargs.pop('allow_single_value', False)
    assert not kwargs, "Unknown kwargs: %s" % kwargs

    if len(args) == 0:
        raise TypeError("expected at least 1 argument")

    if len(args) > 1:
        item_list = args
    else:
        item_list = args[0]
        if not hasattr(item_list, '__iter__'):
            if allow_single_value:
                item_list = [args[0]]
            else:
                raise TypeError("Error: %s is not iterable" % type(item_list))

    return item_list


# Used as a default keyword argument when None is otherwise inappropriate, such
# as cases when None is a valid input that might elicit non-default behavior
NULL_ARG = object()

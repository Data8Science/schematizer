# -*- coding: utf-8 -*-
"""
Provides a decorator @validated, which will check a function's
output, with a validator function. A ValidationError will be
thrown if any validation function returns False.

Each validator function will take an input value `x`, and return
True if `x` succeeds.
"""

from functools import partial, wraps


class ValidationError(ValueError):
    """The error thrown by @validated if a validator fails (returns False)."""


def validated(validator, **validator_kwargs):
    """Decorator that will add a post-condition check (validator). If this
    check fails, then a ValidationError will be thrown.

    For example, if one writes,

        @validated(isfile)
        def foo(x): ...

    then, foo's result will be returned if it is indeed a file,
    otherwise we will throw an error "check << isfile(<args>) >> failed".

    Validators can take keyword arguments, such as `endswith`. Usage:

        @validated(endswith, suffix=".html")
        def foo(x): ...
    """
    bound_validator = partial(validator, **validator_kwargs)

    def inner(fcn):
        @wraps(fcn)
        def fcn_helper(*fcn_argv, **fcn_kwargs):
            result = fcn(*fcn_argv, **fcn_kwargs)

            # Raise an error if the validator failed
            if bound_validator(result):
                return result
            else:
                kwargs_formatted = ["%s=%r" % (k, v)
                    for k, v in validator_kwargs.iteritems()]
                raise ValidationError("check << %s(%s) >> failed" % (validator.__name__,
                    ", ".join([repr(result)] + kwargs_formatted)))

        return fcn_helper
    return inner


# Validators for files, directories, and memory size
def endswith(string, **kwargs):
    """Check that a string (usually file path) ends with a suffix.
    Suffix must always be a kwarg (so @validated behaves as expected)."""
    return string.endswith(kwargs['suffix'])


def is_java_mem_size(mem_string):
    """Returns whether a string is a valid Java memory size string, which
    should be an integer followed by k, m, or g.
    """
    try:
        return (int(mem_string[:-1]) > 0
            and mem_string[-1] in ('k', 'm', 'g', 'K', 'M', 'G'))
    except:
        return False

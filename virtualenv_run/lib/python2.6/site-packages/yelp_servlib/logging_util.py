# -*- coding: utf-8 -*-
from __future__ import absolute_import

import contextlib
import logging
import os
import tempfile
from logging.handlers import RotatingFileHandler


log_format = ("[%(process)d] %(asctime)s "
              ":: %(levelname)-7s :: %(name)s - %(message)s")

uwsgi_initialized = False
"""Make sure we only initialize uwsgi logging once per worker.

This is set to False prefork and set to True postfork once uwsgi_logging
is initted."""


def initialize_uwsgi_logging(log_name, log_directory):
    """Initialize a logger for the `uwsgi` log, sending output to a rotated
    file on disk. This is used to log errors in service startup.

    :param log_name: The name of the log file
    :param log_directory: The location on disk to write the file to
    """
    global uwsgi_initialized
    if not uwsgi_initialized:
        logger = logging.getLogger('uwsgi')

        path = os.path.join(log_directory, log_name)
        handler = RotatingFileHandler(path, maxBytes=102400, backupCount=3)

        handler.setLevel(logging.INFO)
        handler.setFormatter(logging.Formatter(log_format))
        logger.addHandler(handler)
        uwsgi_initialized = True


@contextlib.contextmanager
def log_create_application(log_name, log_directory=None):
    if log_directory is None:
        log_directory = tempfile.gettempdir()
    initialize_uwsgi_logging(log_name, log_directory)

    log = logging.getLogger('uwsgi')
    try:
        yield
    except:
        log.exception('Create application failed')
        raise

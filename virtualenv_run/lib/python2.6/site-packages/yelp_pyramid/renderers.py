# -*- coding: utf-8 -*-
"""Renderers change the output of functions into HTTP bodies. You can get more
information on renderers in the
:ref:`Pyramid documentation <pyramid:renderers_chapter>`
"""
from __future__ import absolute_import
import logging

import simplejson as json
import staticconf

log = logging.getLogger(__name__)


JSON_WITH_STATUS = 'json_with_status'


def json_with_status_renderer_factory(info):
    """Renderer for the common case of JSON with a status code.

    The format which needs to be returned is (int, dict) with the first
    parameter being a HTTP status code and the second paramter being the JSON
    data to serialize.

    .. deprecated:: 0.2 (2013-08-01)

    .. warning::

        This function is now deprecated. It can be used to help migrate from
        Tornado to Pyramid. Please use :class:`pyramid.renderer.JSON`
        with ``renderer='json'`` and use :mod:`pyramid.httpexceptions` to
        return non-200 response codes.
    """
    def _render(value, system):
        if not isinstance(value, tuple):
            raise TypeError('renderer was passed non-tuple as value')
        if len(value) != 2:
            raise ValueError('renderer expected a tuple of length 2 as value '
                             '(got tuple of length %d)' % len(value))

        status, data = value

        if not isinstance(data, dict):
            raise TypeError('data must be a dict, not %r' % type(data))

        request = system['request']
        response = request.response
        response.content_type = "application/json"
        response.status_int = status
        return json.dumps(data)
    return _render


def json_debug(info):
    """The default `json` renderer does not include a helpful stacktrace when
    it hits an encoding error. This renderer can be used in dev to improve the
    error message for debugging encoding problems.

    This renderer can be enabled in your service config by setting the
    `enable_debug_renderer` setting to True in the `yelp_pyramid` namespace
    in :mod:`staticconf`.
    """
    def _render(value, system):
        request = system['request']
        response = request.response
        response.content_type = "application/json"
        try:
            return json.dumps(value)
        except TypeError as e:
            raise TypeError('%s from source %s' % (e, value))

    return _render


def includeme(config):
    config.add_renderer(JSON_WITH_STATUS, factory='yelp_pyramid.renderers:'
                        'json_with_status_renderer_factory')

    if staticconf.read_bool('enable_debug_renderer',
                            default=False,
                            namespace='yelp_pyramid'):
        config.add_renderer('json',
                            factory='yelp_pyramid.renderers:json_debug')

# -*- coding: utf-8 -*-
"""Default views are set up for every service.

These views are those specified by CEPs to be included in every service and
should not need configuration by any service author.
"""
from __future__ import absolute_import

import os
import time
import socket

import simplejson as json
from pyramid.httpexceptions import HTTPServerError
from pyramid.security import NO_PERMISSION_REQUIRED
from pyramid.view import view_config

import yelp_lib.platform

from yelp_pyramid.tweens import log_exception
from yelp_pyramid.tweens import error_log_enabled
from yelp_pyramid.tweens import full_request_logging_enabled


@view_config(route_name='status', renderer='json',
             permission=NO_PERMISSION_REQUIRED)
def status_view(request):
    """Status view

    This function responds to the /status path for your application.

    It returns a JSON encoded dictionary containing important information for
    the purposes of monitoring your application.
    """
    meminfo = yelp_lib.platform.get_meminfo()
    return {
        'host': socket.gethostname(),
        'mem_vsz': meminfo['virt'] / 1024.0,
        'mem_rss': meminfo['res'] / 1024.0,
        'pid': os.getpid(),
        'uptime': time.time() - request.registry['start_time'],
        'version': request.registry['version']
    }


@view_config(route_name='status.version', renderer='string',
             permission=NO_PERMISSION_REQUIRED)
def version_view(request):
    """Version view

    This function responds to the /status/version path for your application.

    It returns a string of the version of your application. This is helpful for
    finding what machines have been updated.
    """
    return str(request.registry['version'])


@view_config(context=Exception)
def server_error_view(exc, request):
    """Log an error and return an error response with a JSON body.

    log_exception formats the request based on full_request_logging.
    full_request_logging is space intensive and can log PII.
    See y/full_request_logging
    """
    if error_log_enabled(request.registry):
        log_exception(
            request,
            request.registry.get('version', 'development'),
            full_request_logging=full_request_logging_enabled(request.registry)
        )
    body = {}
    body['error'] = '%s.%s' % (exc.__class__.__module__,
                               exc.__class__.__name__)
    body['reason'] = str(exc)
    return HTTPServerError(body=json.dumps(body),
                           content_type='application/json')

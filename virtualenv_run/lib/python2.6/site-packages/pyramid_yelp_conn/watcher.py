import logging
import random

import pyramid.events
import yelp_conn.load
from zope.interface import Interface


log = logging.getLogger(__name__)

DEFAULT_MIN_RELOAD = 5
"""Default minimum interval for reloads. This allows the database
connections to be re-established over a longer time period, instead of having
every service worker re-establishing connections all at once.
"""
DEFAULT_MAX_RELOAD = 120
"""Default maximum interval for reloads."""


class IConfigWatcher(Interface):

    def reload_if_changed(force=False):
        pass


def get_reload_interval(settings):
    interval = settings.get('pyramid_yelp_conn.reload_interval')
    if interval:
        return interval

    return random.randint(
        settings.get(
            'pyramid_yelp_conn.min_reload_interval', DEFAULT_MIN_RELOAD),
        settings.get(
            'pyramid_yelp_conn.max_reload_interval', DEFAULT_MAX_RELOAD))


def build_config_watcher(config):
    clusters = config.registry.settings.get(
        'pyramid_yelp_conn.reload_clusters')

    if not clusters:
        raise ValueError("You must specify a list of (cluster, replica) "
                         "pairs in Configurator(settings=...) at key "
                         "`pyramid_yelp_conn.reload_clusters`.")

    log.info("Creating topology reloader for %s", clusters)
    return yelp_conn.load.build_config_watcher(
        get_reload_interval(config.registry.settings),
        clusters,
        config.registry.settings.get('pyramid_yelp_conn.reload_callbacks'))


def get_config_watcher(request_or_registry):
    registry = getattr(request_or_registry, 'registry', request_or_registry)
    return registry.queryUtility(IConfigWatcher, default=None)


def new_request_subscriber(event):
    config_watcher = get_config_watcher(event.request)
    if config_watcher:
        config_watcher.reload_if_changed()


def includeme(config):
    config_watcher = build_config_watcher(config)
    config.registry.registerUtility(config_watcher, IConfigWatcher)
    config.add_subscriber(new_request_subscriber, pyramid.events.NewRequest)
